{"bomFormat":"CycloneDX","specVersion":"1.4","serialNumber":"urn:uuid:127f1eab-94e0-445a-bcdd-09eece3a3d8f","version":1,"metadata":{"timestamp":"2022-07-25T11:26:46.312074+00:00","tools":[{"vendor":"Profiscope","name":"Codescoring (https://codescoring.com)"}]},"components":[{"bom-ref":"pkg:nuget/Autofac@3.5.2","type":"library","author":"Autofac Contributors","group":"Autofac","name":"","version":"3.5.2","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/Autofac@3.5.2","externalReferences":[{"url":"http://autofac.org","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Autofac/3.5.2","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2014-08-12T13:26:43+00:00"}]},{"bom-ref":"pkg:nuget/Autofac.WebApi2@3.4.0","type":"library","author":"Autofac Contributors","group":"Autofac.WebApi2","name":"","version":"3.4.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/Autofac.WebApi2@3.4.0","externalReferences":[{"url":"http://autofac.org","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Autofac.WebApi2/3.4.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2014-08-17T07:22:42+00:00"}]},{"bom-ref":"pkg:nuget/Castle.Core@3.3.3","type":"library","author":"Castle Project Contributors","group":"Castle.Core","name":"","version":"3.3.3","scope":"required","licenses":[{"license":{"name":"Generic Bare Warranty Disclaimer"}},{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/Castle.Core@3.3.3","externalReferences":[{"url":"http://www.castleproject.org/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Castle.Core/3.3.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2014-11-06T02:19:10+00:00"}]},{"bom-ref":"pkg:nuget/FluentAssertions@4.11.0","type":"library","author":"Dennis Doomen","group":"FluentAssertions","name":"","version":"4.11.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/FluentAssertions@4.11.0","externalReferences":[{"url":"http://www.fluentassertions.com","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/FluentAssertions/4.11.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2016-07-06T12:10:13+00:00"}]},{"bom-ref":"pkg:nuget/ILMerge@2.14.1208","type":"library","author":"mbarnett","group":"ILMerge","name":"","version":"2.14.1208","scope":"required","licenses":[{"license":{"name":"MS ILMerge License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://research.microsoft.com/en-us/people/mbarnett/ilmerge-license.aspx"}}],"purl":"pkg:nuget/ILMerge@2.14.1208","externalReferences":[{"url":"https://www.microsoft.com/en-us/research/people/mbarnett/#ilmerge","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/ILMerge/2.14.1208","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2014-12-08T17:46:52+00:00"}]},{"bom-ref":"pkg:nuget/IdentityModel@1.11.0","type":"library","author":"Dominick Baier, Brock Allen","group":"IdentityModel","name":"","version":"1.11.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/IdentityModel@1.11.0","externalReferences":[{"url":"http://github.com/identitymodel","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/IdentityModel/1.11.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2016-04-18T08:12:57+00:00"}]},{"bom-ref":"pkg:nuget/LibLog@4.2.5","type":"library","author":"Damian Hickey","group":"LibLog","name":"","version":"4.2.5","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/LibLog@4.2.5","externalReferences":[{"url":"https://github.com/damianh/LibLog","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/LibLog/4.2.5","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"dev"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2016-03-29T18:39:29+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.AspNet.Cors@5.2.3","type":"library","author":"Microsoft","group":"Microsoft.AspNet.Cors","name":"","version":"5.2.3","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.AspNet.Cors@5.2.3","externalReferences":[{"url":"http://www.asp.net/web-api","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.AspNet.Cors/5.2.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-09T19:54:51+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.AspNet.WebApi.Client@5.2.3","type":"library","author":"Microsoft","group":"Microsoft.AspNet.WebApi.Client","name":"","version":"5.2.3","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.AspNet.WebApi.Client@5.2.3","externalReferences":[{"url":"http://www.asp.net/web-api","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Client/5.2.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-09T20:26:33+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.AspNet.WebApi.Core@5.2.3","type":"library","author":"Microsoft","group":"Microsoft.AspNet.WebApi.Core","name":"","version":"5.2.3","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.AspNet.WebApi.Core@5.2.3","externalReferences":[{"url":"http://www.asp.net/web-api","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Core/5.2.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-09T20:39:02+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.AspNet.WebApi.Owin@5.2.3","type":"library","author":"Microsoft","group":"Microsoft.AspNet.WebApi.Owin","name":"","version":"5.2.3","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.AspNet.WebApi.Owin@5.2.3","externalReferences":[{"url":"http://www.asp.net/web-api","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Owin/5.2.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-09T20:55:10+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.AspNet.WebApi.Tracing@5.2.3","type":"library","author":"Microsoft","group":"Microsoft.AspNet.WebApi.Tracing","name":"","version":"5.2.3","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.AspNet.WebApi.Tracing@5.2.3","externalReferences":[{"url":"http://www.asp.net/web-api","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.AspNet.WebApi.Tracing/5.2.3","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2015-02-09T22:22:30+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.IdentityModel.Protocol.Extensions@1.0.2.206221351","type":"library","author":"Microsoft Corporation","group":"Microsoft.IdentityModel.Protocol.Extensions","name":"","version":"1.0.2.206221351","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/Microsoft.IdentityModel.Protocol.Extensions@1.0.2.206221351","externalReferences":[{"url":"http://go.microsoft.com/fwlink/?LinkId=272508","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.IdentityModel.Protocol.Extensions/1.0.2.206221351","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"published_at","value":"2015-06-23T00:23:22+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"CgpNSUNST1NPRlQgU09GVFdBUkUgTElDRU5TRSBURVJNUwoKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQoKVGhlc2UgbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpLiBUaGV5IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSBuYW1lZCBhYm92ZS4gVGhlIHRlcm1zIGFsc28gYXBwbHkgdG8gYW55IE1pY3Jvc29mdCBzZXJ2aWNlcyBvciB1cGRhdGVzIGZvciB0aGUgc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLgoKSWYgeW91IGNvbXBseSB3aXRoIHRoZXNlIGxpY2Vuc2UgdGVybXMsIHlvdSBoYXZlIHRoZSByaWdodHMgYmVsb3cuCjEuICAgIElOU1RBTExBVElPTiBBTkQgVVNFIFJJR0hUUy4KCllvdSBtYXkgaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSB0byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiAKMi4gICAgVEhJUkQgUEFSVFkgQ09NUE9ORU5UUy4gVGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aCBzZXBhcmF0ZSBsZWdhbCBub3RpY2VzIG9yIGdvdmVybmVkIGJ5IG90aGVyIGFncmVlbWVudHMsIGFzIG1heSBiZSBkZXNjcmliZWQgaW4gdGhlIFRoaXJkUGFydHlOb3RpY2VzIGZpbGUocykgYWNjb21wYW55aW5nIHRoZSBzb2Z0d2FyZS4KMy4gICAgQURESVRJT05BTCBMSUNFTlNJTkcgUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLgphLiAgICAgRElTVFJJQlVUQUJMRSBDT0RFLiAgVGhlIHNvZnR3YXJlIGlzIGNvbXByaXNlZCBvZiBEaXN0cmlidXRhYmxlIENvZGUuIOKAnERpc3RyaWJ1dGFibGUgQ29kZeKAnSBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBhcHBsaWNhdGlvbnMgeW91IGRldmVsb3AgaWYgeW91IGNvbXBseSB3aXRoIHRoZSB0ZXJtcyBiZWxvdy4KaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgWW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS4KCsK3ICAgICAgICBUaGlyZCBQYXJ0eSBEaXN0cmlidXRpb24uIFlvdSBtYXkgcGVybWl0IGRpc3RyaWJ1dG9ycyBvZiB5b3VyIGFwcGxpY2F0aW9ucyB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuCmlpLiAgICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgdXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhIHN0YW5kYWxvbmUgZGlzdHJpYnV0aW9uOwoKwrcgICAgICAgIHJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdCBwcm90ZWN0IGl0IGF0IGxlYXN0IGFzIG11Y2ggYXMgdGhpcyBhZ3JlZW1lbnQ7IGFuZAoKwrcgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBhcHBsaWNhdGlvbnMsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlIENvZGUuCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgIHVzZSBNaWNyb3NvZnTigJlzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIGFwcGxpY2F0aW9ucyBjb21lIGZyb20gb3IgYXJlIGVuZG9yc2VkIGJ5IE1pY3Jvc29mdDsgb3IKCsK3ICAgICAgICBtb2RpZnkgb3IgZGlzdHJpYnV0ZSB0aGUgc291cmNlIGNvZGUgb2YgYW55IERpc3RyaWJ1dGFibGUgQ29kZSBzbyB0aGF0IGFueSBwYXJ0IG9mIGl0IGJlY29tZXMgc3ViamVjdCB0byBhbiBFeGNsdWRlZCBMaWNlbnNlLiBBbiDigJxFeGNsdWRlZCBMaWNlbnNl4oCdIGlzIG9uZSB0aGF0IHJlcXVpcmVzLCBhcyBhIGNvbmRpdGlvbiBvZiB1c2UsIG1vZGlmaWNhdGlvbiBvciBkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlIGZvcm07IG9yIChpaSkgb3RoZXJzIGhhdmUgdGhlIHJpZ2h0IHRvIG1vZGlmeSBpdC4KNC4gICAgREFUQS4KYS4gICAgIERhdGEgQ29sbGVjdGlvbi4gVGhlIHNvZnR3YXJlIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4gTWljcm9zb2Z0IG1heSB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBpbXByb3ZlIG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXMuICBZb3UgbWF5IG9wdC1vdXQgb2YgbWFueSBvZiB0aGVzZSBzY2VuYXJpb3MsIGJ1dCBub3QgYWxsLCBhcyBkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uICBUaGVyZSBhcmUgYWxzbyBzb21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZCBNaWNyb3NvZnQgdG8gY29sbGVjdCBkYXRhIGZyb20gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMuIElmIHlvdSB1c2UgdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nIGFwcHJvcHJpYXRlIG5vdGljZXMgdG8gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMgdG9nZXRoZXIgd2l0aCBNaWNyb3NvZnTigJlzIHByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCBodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgZGF0YSBjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5IHN0YXRlbWVudC4gWW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlIG9wZXJhdGVzIGFzIHlvdXIgY29uc2VudCB0byB0aGVzZSBwcmFjdGljZXMuCmIuICAgIFByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gVG8gdGhlIGV4dGVudCBNaWNyb3NvZnQgaXMgYSBwcm9jZXNzb3Igb3Igc3VicHJvY2Vzc29yIG9mIHBlcnNvbmFsIGRhdGEgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBzb2Z0d2FyZSwgTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbiBUZXJtcyBvZiB0aGUgT25saW5lIFNlcnZpY2VzIFRlcm1zIHRvIGFsbCBjdXN0b21lcnMgZWZmZWN0aXZlIE1heSAyNSwgMjAxOCwgYXQgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbGVnYWwvZ2Rwci4KNS4gICAgU2NvcGUgb2YgTGljZW5zZS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgd29yayBhcm91bmQgYW55IHRlY2huaWNhbCBsaW1pdGF0aW9ucyBpbiB0aGUgc29mdHdhcmU7CgrCtyAgICAgICAgcmV2ZXJzZSBlbmdpbmVlciwgZGVjb21waWxlIG9yIGRpc2Fzc2VtYmxlIHRoZSBzb2Z0d2FyZSwgb3Igb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zIGdvdmVybmluZyB1c2Ugb2YgY2VydGFpbiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIHRoYXQgbWF5IGJlIGluY2x1ZGVkIGluIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICByZW1vdmUsIG1pbmltaXplLCBibG9jayBvciBtb2RpZnkgYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgIHVzZSB0aGUgc29mdHdhcmUgaW4gYW55IHdheSB0aGF0IGlzIGFnYWluc3QgdGhlIGxhdzsgb3IKCsK3ICAgICAgICBzaGFyZSwgcHVibGlzaCwgcmVudCBvciBsZWFzZSB0aGUgc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yIHRyYW5zZmVyIHRoZSBzb2Z0d2FyZSBvciB0aGlzIGFncmVlbWVudCB0byBhbnkgdGhpcmQgcGFydHkuCjYuICAgIEV4cG9ydCBSZXN0cmljdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUsIHdoaWNoIGluY2x1ZGUgcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gZXhwb3J0IHJlc3RyaWN0aW9ucywgdmlzaXQgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLiAgCjcuICAgIFNVUFBPUlQgU0VSVklDRVMuIEJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyDigJxhcyBpcyzigJ0gd2UgbWF5IG5vdCBwcm92aWRlIHN1cHBvcnQgc2VydmljZXMgZm9yIGl0Lgo4LiAgICBFbnRpcmUgQWdyZWVtZW50LiBUaGlzIGFncmVlbWVudCwgYW5kIHRoZSB0ZXJtcyBmb3Igc3VwcGxlbWVudHMsIHVwZGF0ZXMsIEludGVybmV0LWJhc2VkIHNlcnZpY2VzIGFuZCBzdXBwb3J0IHNlcnZpY2VzIHRoYXQgeW91IHVzZSwgYXJlIHRoZSBlbnRpcmUgYWdyZWVtZW50IGZvciB0aGUgc29mdHdhcmUgYW5kIHN1cHBvcnQgc2VydmljZXMuCjkuICAgIEFwcGxpY2FibGUgTGF3LiAgSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBsYXcgYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgYXBwbHkgdG8gYWxsIG90aGVyIGNsYWltcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBhbnkgb3RoZXIgY291bnRyeSwgaXRzIGxhd3MgYXBwbHkuCjEwLiBDT05TVU1FUiBSSUdIVFM7IFJFR0lPTkFMIFZBUklBVElPTlMuIFRoaXMgYWdyZWVtZW50IGRlc2NyaWJlcyBjZXJ0YWluIGxlZ2FsIHJpZ2h0cy4gWW91IG1heSBoYXZlIG90aGVyIHJpZ2h0cywgaW5jbHVkaW5nIGNvbnN1bWVyIHJpZ2h0cywgdW5kZXIgdGhlIGxhd3Mgb2YgeW91ciBzdGF0ZSBvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aGljaCB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlLiBUaGlzIGFncmVlbWVudCBkb2VzIG5vdCBjaGFuZ2UgdGhvc2Ugb3RoZXIgcmlnaHRzIGlmIHRoZSBsYXdzIG9mIHlvdXIgc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBvbmUgb2YgdGhlIGJlbG93IHJlZ2lvbnMsIG9yIG1hbmRhdG9yeSBjb3VudHJ5IGxhdyBhcHBsaWVzLCB0aGVuIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBhcHBseSB0byB5b3U6CmEpICAgIEF1c3RyYWxpYS4gWW91IGhhdmUgc3RhdHV0b3J5IGd1YXJhbnRlZXMgdW5kZXIgdGhlIEF1c3RyYWxpYW4gQ29uc3VtZXIgTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuCmIpICAgIENhbmFkYS4gSWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3AgcmVjZWl2aW5nIHVwZGF0ZXMgYnkgdHVybmluZyBvZmYgdGhlIGF1dG9tYXRpYyB1cGRhdGUgZmVhdHVyZSwgZGlzY29ubmVjdGluZyB5b3VyIGRldmljZSBmcm9tIHRoZSBJbnRlcm5ldCAoaWYgYW5kIHdoZW4geW91IHJlLWNvbm5lY3QgdG8gdGhlIEludGVybmV0LCBob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcgdGhlIHNvZnR3YXJlLiBUaGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uLCBpZiBhbnksIG1heSBhbHNvIHNwZWNpZnkgaG93IHRvIHR1cm4gb2ZmIHVwZGF0ZXMgZm9yIHlvdXIgc3BlY2lmaWMgZGV2aWNlIG9yIHNvZnR3YXJlLgpjKSAgICBHZXJtYW55IGFuZCBBdXN0cmlhLgoKKGkpICAgICAgICBXYXJyYW50eS4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybSBzdWJzdGFudGlhbGx5IGFzIGRlc2NyaWJlZCBpbiBhbnkgTWljcm9zb2Z0IG1hdGVyaWFscyB0aGF0IGFjY29tcGFueSBpdC4gSG93ZXZlciwgTWljcm9zb2Z0IGdpdmVzIG5vIGNvbnRyYWN0dWFsIGd1YXJhbnRlZSBpbiByZWxhdGlvbiB0byB0aGUgc29mdHdhcmUuCgooaWkpICAgICAgIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBjYXNlIG9mIGludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkgQWN0LCBhcyB3ZWxsIGFzIGluIGNhc2Ugb2YgZGVhdGggb3IgcGVyc29uYWwgb3IgcGh5c2ljYWwgaW5qdXJ5LCBNaWNyb3NvZnQgaXMgbGlhYmxlIGFjY29yZGluZyB0byB0aGUgc3RhdHV0b3J5IGxhdy4KU3ViamVjdCB0byB0aGUgZm9yZWdvaW5nIGNsYXVzZSAoaWkpLCBNaWNyb3NvZnQgd2lsbCBvbmx5IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2UgaWYgTWljcm9zb2Z0IGlzIGluIGJyZWFjaCBvZiBzdWNoIG1hdGVyaWFsIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlIHBlcmZvcm1hbmNlIG9mIHRoaXMgYWdyZWVtZW50LCB0aGUgYnJlYWNoIG9mIHdoaWNoIHdvdWxkIGVuZGFuZ2VyIHRoZSBwdXJwb3NlIG9mIHRoaXMgYWdyZWVtZW50IGFuZCB0aGUgY29tcGxpYW5jZSB3aXRoIHdoaWNoIGEgcGFydHkgbWF5IGNvbnN0YW50bHkgdHJ1c3QgaW4gKHNvLWNhbGxlZCAiY2FyZGluYWwgb2JsaWdhdGlvbnMiKS4gSW4gb3RoZXIgY2FzZXMgb2Ygc2xpZ2h0IG5lZ2xpZ2VuY2UsIE1pY3Jvc29mdCB3aWxsIG5vdCBiZSBsaWFibGUgZm9yIHNsaWdodCBuZWdsaWdlbmNlCjExLiBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBUSEUgU09GVFdBUkUgSVMgTElDRU5TRUQg4oCcQVMtSVMu4oCdIFlPVSBCRUFSIFRIRSBSSVNLIE9GIFVTSU5HIElULiBNSUNST1NPRlQgR0lWRVMgTk8gRVhQUkVTUyBXQVJSQU5USUVTLCBHVUFSQU5URUVTIE9SIENPTkRJVElPTlMuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KMTIuIExpbWl0YXRpb24gb24gYW5kIEV4Y2x1c2lvbiBvZiBSZW1lZGllcyBhbmQgRGFtYWdlcy4gWU9VIENBTiBSRUNPVkVSIEZST00gTUlDUk9TT0ZUIEFORCBJVFMgU1VQUExJRVJTIE9OTFkgRElSRUNUIERBTUFHRVMgVVAgVE8gVS5TLiAkNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVCBQUk9GSVRTLCBTUEVDSUFMLCBJTkRJUkVDVCBPUiBJTkNJREVOVEFMIERBTUFHRVMuCgpUaGlzIGxpbWl0YXRpb24gYXBwbGllcyB0byAoYSkgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZiBjb250cmFjdCwgYnJlYWNoIG9mIHdhcnJhbnR5LCBndWFyYW50ZWUgb3IgY29uZGl0aW9uLCBzdHJpY3QgbGlhYmlsaXR5LCBuZWdsaWdlbmNlLCBvciBvdGhlciB0b3J0IHRvIHRoZSBleHRlbnQgcGVybWl0dGVkIGJ5IGFwcGxpY2FibGUgbGF3LgoKSXQgYWxzbyBhcHBsaWVzIGV2ZW4gaWYgTWljcm9zb2Z0IGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gYWJvdXQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZSB5b3VyIHN0YXRlIG9yIGNvdW50cnkgbWF5IG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgaW5jaWRlbnRhbCwgY29uc2VxdWVudGlhbCBvciBvdGhlciBkYW1hZ2VzLgoKIAo=","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T01:23:58+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Cors@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Cors","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Cors@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Cors/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T01:24:29+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Diagnostics@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Diagnostics","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Diagnostics@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Diagnostics/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"published_at","value":"2015-02-20T01:26:05+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.FileSystems@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.FileSystems","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"TUlDUk9TT0ZUIFNPRlRXQVJFIExJQ0VOU0UgVEVSTVMKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQpUaGVzZSBsaWNlbnNlIHRlcm1zIGFyZSBhbiBhZ3JlZW1lbnQgYmV0d2VlbiBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpIGFuZCB5b3UuIFBsZWFzZSByZWFkIHRoZW0uIFRoZXkgYXBwbHkgdG8gdGhlIHNvZnR3YXJlIG5hbWVkIGFib3ZlLCB3aGljaCBpbmNsdWRlcyB0aGUgbWVkaWEgb24gd2hpY2ggeW91IHJlY2VpdmVkIGl0LCBpZiBhbnkuIFRoZSB0ZXJtcyBhbHNvIGFwcGx5IHRvIGFueSBNaWNyb3NvZnQKCsK3ICAgICAgICAgdXBkYXRlcywKCsK3ICAgICAgICAgc3VwcGxlbWVudHMsCgrCtyAgICAgICAgIEludGVybmV0LWJhc2VkIHNlcnZpY2VzLCBhbmQKCsK3ICAgICAgICAgc3VwcG9ydCBzZXJ2aWNlcwoKZm9yIHRoaXMgc29mdHdhcmUsIHVubGVzcyBvdGhlciB0ZXJtcyBhY2NvbXBhbnkgdGhvc2UgaXRlbXMuIElmIHNvLCB0aG9zZSB0ZXJtcyBhcHBseS4KCkJZIFVTSU5HIFRIRSBTT0ZUV0FSRSwgWU9VIEFDQ0VQVCBUSEVTRSBURVJNUy4gSUYgWU9VIERPIE5PVCBBQ0NFUFQgVEhFTSwgRE8gTk9UIFVTRSBUSEUgU09GVFdBUkUuCgpJRiBZT1UgQ09NUExZIFdJVEggVEhFU0UgTElDRU5TRSBURVJNUywgWU9VIEhBVkUgVEhFIFBFUlBFVFVBTCBSSUdIVFMgQkVMT1cuCgoxLiAgICBJTlNUQUxMQVRJT04gQU5EIFVTRSBSSUdIVFMuCgphLiAgICBJbnN0YWxsYXRpb24gYW5kIFVzZS4gWW91IG1heSBpbnN0YWxsIGFuZCB1c2UgYW55IG51bWJlciBvZiBjb3BpZXMgb2YgdGhlIHNvZnR3YXJlIHRvIGRlc2lnbiwgZGV2ZWxvcCBhbmQgdGVzdCB5b3VyIHByb2dyYW1zLgoKYi4gICAgVGhpcmQgUGFydHkgUHJvZ3JhbXMuIFRoZSBzb2Z0d2FyZSBtYXkgaW5jbHVkZSB0aGlyZCBwYXJ0eSBwcm9ncmFtcyB0aGF0IE1pY3Jvc29mdCwgbm90IHRoZSB0aGlyZCBwYXJ0eSwgbGljZW5zZXMgdG8geW91IHVuZGVyIHRoaXMgYWdyZWVtZW50LiBOb3RpY2VzLCBpZiBhbnksIGZvciB0aGUgdGhpcmQgcGFydHkgcHJvZ3JhbSBhcmUgaW5jbHVkZWQgZm9yIHlvdXIgaW5mb3JtYXRpb24gb25seS4KCjIuICAgIEFERElUSU9OQUwgTElDRU5TSU5HIFJFUVVJUkVNRU5UUyBBTkQvT1IgVVNFIFJJR0hUUy4KCmEuICAgIERJU1RSSUJVVEFCTEUgQ09ERS4gIFRoZSBzb2Z0d2FyZSBpcyBjb21wcmlzZWQgb2YgRGlzdHJpYnV0YWJsZSBDb2RlLiAiRGlzdHJpYnV0YWJsZSBDb2RlIiBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBwcm9ncmFtcyB5b3UgZGV2ZWxvcCBpZiB5b3UgY29tcGx5IHdpdGggdGhlIHRlcm1zIGJlbG93LgoKaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgIFlvdSBtYXkgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgb2JqZWN0IGNvZGUgZm9ybSBvZiB0aGUgc29mdHdhcmUuCgrCtyAgICAgICAgIFRoaXJkIFBhcnR5IERpc3RyaWJ1dGlvbi4gWW91IG1heSBwZXJtaXQgZGlzdHJpYnV0b3JzIG9mIHlvdXIgcHJvZ3JhbXMgdG8gY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgRGlzdHJpYnV0YWJsZSBDb2RlIGFzIHBhcnQgb2YgdGhvc2UgcHJvZ3JhbXMuCgppaS4gICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgIGFkZCBzaWduaWZpY2FudCBwcmltYXJ5IGZ1bmN0aW9uYWxpdHkgdG8gaXQgaW4geW91ciBwcm9ncmFtczsKCsK3ICAgICAgICAgcmVxdWlyZSBkaXN0cmlidXRvcnMgYW5kIGV4dGVybmFsIGVuZCB1c2VycyB0byBhZ3JlZSB0byB0ZXJtcyB0aGF0IHByb3RlY3QgaXQgYXQgbGVhc3QgYXMgbXVjaCBhcyB0aGlzIGFncmVlbWVudDsKCsK3ICAgICAgICAgZGlzcGxheSB5b3VyIHZhbGlkIGNvcHlyaWdodCBub3RpY2Ugb24geW91ciBwcm9ncmFtczsgYW5kCgrCtyAgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBwcm9ncmFtcy4KCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgICBhbHRlciBhbnkgY29weXJpZ2h0LCB0cmFkZW1hcmsgb3IgcGF0ZW50IG5vdGljZSBpbiB0aGUgRGlzdHJpYnV0YWJsZSBDb2RlOwoKwrcgICAgICAgICB1c2UgTWljcm9zb2Z04oCZcyB0cmFkZW1hcmtzIGluIHlvdXIgcHJvZ3JhbXPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIHByb2dyYW1zIGNvbWUgZnJvbSBvciBhcmUgZW5kb3JzZWQgYnkgTWljcm9zb2Z0OwoKwrcgICAgICAgICBpbmNsdWRlIERpc3RyaWJ1dGFibGUgQ29kZSBpbiBtYWxpY2lvdXMsIGRlY2VwdGl2ZSBvciB1bmxhd2Z1bCBwcm9ncmFtczsgb3IKCsK3ICAgICAgICAgbW9kaWZ5IG9yIGRpc3RyaWJ1dGUgdGhlIHNvdXJjZSBjb2RlIG9mIGFueSBEaXN0cmlidXRhYmxlIENvZGUgc28gdGhhdCBhbnkgcGFydCBvZiBpdCBiZWNvbWVzIHN1YmplY3QgdG8gYW4gRXhjbHVkZWQgTGljZW5zZS4gQW4gRXhjbHVkZWQgTGljZW5zZSBpcyBvbmUgdGhhdCByZXF1aXJlcywgYXMgYSBjb25kaXRpb24gb2YgdXNlLCBtb2RpZmljYXRpb24gb3IgZGlzdHJpYnV0aW9uLCB0aGF0CgrCtyAgICAgICAgIHRoZSBjb2RlIGJlIGRpc2Nsb3NlZCBvciBkaXN0cmlidXRlZCBpbiBzb3VyY2UgY29kZSBmb3JtOyBvcgoKwrcgICAgICAgICBvdGhlcnMgaGF2ZSB0aGUgcmlnaHQgdG8gbW9kaWZ5IGl0LgoKMy4gICAgU0NPUEUgT0YgTElDRU5TRS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgIHdvcmsgYXJvdW5kIGFueSB0ZWNobmljYWwgbGltaXRhdGlvbnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgICByZXZlcnNlIGVuZ2luZWVyLCBkZWNvbXBpbGUgb3IgZGlzYXNzZW1ibGUgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIG9ubHkgdG8gdGhlIGV4dGVudCB0aGF0IGFwcGxpY2FibGUgbGF3IGV4cHJlc3NseSBwZXJtaXRzLCBkZXNwaXRlIHRoaXMgbGltaXRhdGlvbjsKCsK3ICAgICAgICAgcHVibGlzaCB0aGUgc29mdHdhcmUgZm9yIG90aGVycyB0byBjb3B5OwoKwrcgICAgICAgICByZW50LCBsZWFzZSBvciBsZW5kIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICAgdHJhbnNmZXIgdGhlIHNvZnR3YXJlIG9yIHRoaXMgYWdyZWVtZW50IHRvIGFueSB0aGlyZCBwYXJ0eTsgb3IKCsK3ICAgICAgICAgdXNlIHRoZSBzb2Z0d2FyZSBmb3IgY29tbWVyY2lhbCBzb2Z0d2FyZSBob3N0aW5nIHNlcnZpY2VzLgoKNC4gICAgQkFDS1VQIENPUFkuIFlvdSBtYXkgbWFrZSBvbmUgYmFja3VwIGNvcHkgb2YgdGhlIHNvZnR3YXJlLiBZb3UgbWF5IHVzZSBpdCBvbmx5IHRvIHJlaW5zdGFsbCB0aGUgc29mdHdhcmUuCgo1LiAgICBET0NVTUVOVEFUSU9OLiBBbnkgcGVyc29uIHRoYXQgaGFzIHZhbGlkIGFjY2VzcyB0byB5b3VyIGNvbXB1dGVyIG9yIGludGVybmFsIG5ldHdvcmsgbWF5IGNvcHkgYW5kIHVzZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgeW91ciBpbnRlcm5hbCwgcmVmZXJlbmNlIHB1cnBvc2VzLgoKNi4gICAgRVhQT1JUIFJFU1RSSUNUSU9OUy4gVGhlIHNvZnR3YXJlIGlzIHN1YmplY3QgdG8gVW5pdGVkIFN0YXRlcyBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUuIFRoZXNlIGxhd3MgaW5jbHVkZSByZXN0cmljdGlvbnMgb24gZGVzdGluYXRpb25zLCBlbmQgdXNlcnMgYW5kIGVuZCB1c2UuIEZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLCBzZWUgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLgoKNy4gICAgU1VQUE9SVCBTRVJWSUNFUy4gQmVjYXVzZSB0aGlzIHNvZnR3YXJlIGlzICJhcyBpcywiIHdlIG1heSBub3QgcHJvdmlkZSBzdXBwb3J0IHNlcnZpY2VzIGZvciBpdC4KCjguICAgIEVOVElSRSBBR1JFRU1FTlQuIFRoaXMgYWdyZWVtZW50LCBhbmQgdGhlIHRlcm1zIGZvciBzdXBwbGVtZW50cywgdXBkYXRlcywgSW50ZXJuZXQtYmFzZWQgc2VydmljZXMgYW5kIHN1cHBvcnQgc2VydmljZXMgdGhhdCB5b3UgdXNlLCBhcmUgdGhlIGVudGlyZSBhZ3JlZW1lbnQgZm9yIHRoZSBzb2Z0d2FyZSBhbmQgc3VwcG9ydCBzZXJ2aWNlcy4KCjkuICAgIEFQUExJQ0FCTEUgTEFXLgoKYS4gICAgVW5pdGVkIFN0YXRlcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBzdGF0ZSBsYXcgZ292ZXJucyB0aGUgaW50ZXJwcmV0YXRpb24gb2YgdGhpcyBhZ3JlZW1lbnQgYW5kIGFwcGxpZXMgdG8gY2xhaW1zIGZvciBicmVhY2ggb2YgaXQsIHJlZ2FyZGxlc3Mgb2YgY29uZmxpY3Qgb2YgbGF3cyBwcmluY2lwbGVzLiBUaGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgZ292ZXJuIGFsbCBvdGhlciBjbGFpbXMsIGluY2x1ZGluZyBjbGFpbXMgdW5kZXIgc3RhdGUgY29uc3VtZXIgcHJvdGVjdGlvbiBsYXdzLCB1bmZhaXIgY29tcGV0aXRpb24gbGF3cywgYW5kIGluIHRvcnQuCgpiLiAgICBPdXRzaWRlIHRoZSBVbml0ZWQgU3RhdGVzLiBJZiB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlIGluIGFueSBvdGhlciBjb3VudHJ5LCB0aGUgbGF3cyBvZiB0aGF0IGNvdW50cnkgYXBwbHkuCgoxMC4gIExFR0FMIEVGRkVDVC4gVGhpcyBhZ3JlZW1lbnQgZGVzY3JpYmVzIGNlcnRhaW4gbGVnYWwgcmlnaHRzLiBZb3UgbWF5IGhhdmUgb3RoZXIgcmlnaHRzIHVuZGVyIHRoZSBsYXdzIG9mIHlvdXIgY291bnRyeS4gWW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aG9tIHlvdSBhY3F1aXJlZCB0aGUgc29mdHdhcmUuIFRoaXMgYWdyZWVtZW50IGRvZXMgbm90IGNoYW5nZSB5b3VyIHJpZ2h0cyB1bmRlciB0aGUgbGF3cyBvZiB5b3VyIGNvdW50cnkgaWYgdGhlIGxhd3Mgb2YgeW91ciBjb3VudHJ5IGRvIG5vdCBwZXJtaXQgaXQgdG8gZG8gc28uCgoxMS4gIERJU0NMQUlNRVIgT0YgV0FSUkFOVFkuIFRIRSBTT0ZUV0FSRSBJUyBMSUNFTlNFRCAiQVMtSVMuIiBZT1UgQkVBUiBUSEUgUklTSyBPRiBVU0lORyBJVC4gTUlDUk9TT0ZUIEdJVkVTIE5PIEVYUFJFU1MgV0FSUkFOVElFUywgR1VBUkFOVEVFUyBPUiBDT05ESVRJT05TLiBZT1UgTUFZIEhBVkUgQURESVRJT05BTCBDT05TVU1FUiBSSUdIVFMgT1IgU1RBVFVUT1JZIEdVQVJBTlRFRVMgVU5ERVIgWU9VUiBMT0NBTCBMQVdTIFdISUNIIFRISVMgQUdSRUVNRU5UIENBTk5PVCBDSEFOR0UuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KCkZPUiBBVVNUUkFMSUEg4oCTIFlPVSBIQVZFIFNUQVRVVE9SWSBHVUFSQU5URUVTIFVOREVSIFRIRSBBVVNUUkFMSUFOIENPTlNVTUVSIExBVyBBTkQgTk9USElORyBJTiBUSEVTRSBURVJNUyBJUyBJTlRFTkRFRCBUTyBBRkZFQ1QgVEhPU0UgUklHSFRTLgoKMTIuICBMSU1JVEFUSU9OIE9OIEFORCBFWENMVVNJT04gT0YgUkVNRURJRVMgQU5EIERBTUFHRVMuIFlPVSBDQU4gUkVDT1ZFUiBGUk9NIE1JQ1JPU09GVCBBTkQgSVRTIFNVUFBMSUVSUyBPTkxZIERJUkVDVCBEQU1BR0VTIFVQIFRPIFUuUy4gJDUuMDAuIFlPVSBDQU5OT1QgUkVDT1ZFUiBBTlkgT1RIRVIgREFNQUdFUywgSU5DTFVESU5HIENPTlNFUVVFTlRJQUwsIExPU1QgUFJPRklUUywgU1BFQ0lBTCwgSU5ESVJFQ1QgT1IgSU5DSURFTlRBTCBEQU1BR0VTLgoKVGhpcyBsaW1pdGF0aW9uIGFwcGxpZXMgdG8KCsK3ICAgICAgICAgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IHByb2dyYW1zOyBhbmQKCsK3ICAgICAgICAgY2xhaW1zIGZvciBicmVhY2ggb2YgY29udHJhY3QsIGJyZWFjaCBvZiB3YXJyYW50eSwgZ3VhcmFudGVlIG9yIGNvbmRpdGlvbiwgc3RyaWN0IGxpYWJpbGl0eSwgbmVnbGlnZW5jZSwgb3Igb3RoZXIgdG9ydCB0byB0aGUgZXh0ZW50IHBlcm1pdHRlZCBieSBhcHBsaWNhYmxlIGxhdy4KCkl0IGFsc28gYXBwbGllcyBldmVuIGlmIE1pY3Jvc29mdCBrbmV3IG9yIHNob3VsZCBoYXZlIGtub3duIGFib3V0IHRoZSBwb3NzaWJpbGl0eSBvZiB0aGUgZGFtYWdlcy4gVGhlIGFib3ZlIGxpbWl0YXRpb24gb3IgZXhjbHVzaW9uIG1heSBub3QgYXBwbHkgdG8geW91IGJlY2F1c2UgeW91ciBjb3VudHJ5IG1heSBub3QgYWxsb3cgdGhlIGV4Y2x1c2lvbiBvciBsaW1pdGF0aW9uIG9mIGluY2lkZW50YWwsIGNvbnNlcXVlbnRpYWwgb3Igb3RoZXIgZGFtYWdlcy4KClBsZWFzZSBub3RlOiBBcyB0aGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIGluIFF1ZWJlYywgQ2FuYWRhLCBzb21lIG9mIHRoZSBjbGF1c2VzIGluIHRoaXMgYWdyZWVtZW50IGFyZSBwcm92aWRlZCBiZWxvdyBpbiBGcmVuY2guCgpSZW1hcnF1ZSA6IENlIGxvZ2ljaWVsIMOpdGFudCBkaXN0cmlidcOpIGF1IFF1w6liZWMsIENhbmFkYSwgY2VydGFpbmVzIGRlcyBjbGF1c2VzIGRhbnMgY2UgY29udHJhdCBzb250IGZvdXJuaWVzIGNpLWRlc3NvdXMgZW4gZnJhbsOnYWlzLgoKRVhPTsOJUkFUSU9OIERFIEdBUkFOVElFLiBMZSBsb2dpY2llbCB2aXPDqSBwYXIgdW5lIGxpY2VuY2UgZXN0IG9mZmVydCDCqyB0ZWwgcXVlbCDCuy4gVG91dGUgdXRpbGlzYXRpb24gZGUgY2UgbG9naWNpZWwgZXN0IMOgIHZvdHJlIHNldWxlIHJpc3F1ZSBldCBww6lyaWwuIE1pY3Jvc29mdCBu4oCZYWNjb3JkZSBhdWN1bmUgYXV0cmUgZ2FyYW50aWUgZXhwcmVzc2UuIFZvdXMgcG91dmV6IGLDqW7DqWZpY2llciBkZSBkcm9pdHMgYWRkaXRpb25uZWxzIGVuIHZlcnR1IGR1IGRyb2l0IGxvY2FsIHN1ciBsYSBwcm90ZWN0aW9uIGRlcyBjb25zb21tYXRldXJzLCBxdWUgY2UgY29udHJhdCBuZSBwZXV0IG1vZGlmaWVyLiBMYSBvdSBlbGxlcyBzb250IHBlcm1pc2VzIHBhciBsZSBkcm9pdCBsb2NhbGUsIGxlcyBnYXJhbnRpZXMgaW1wbGljaXRlcyBkZSBxdWFsaXTDqSBtYXJjaGFuZGUsIGTigJlhZMOpcXVhdGlvbiDDoCB1biB1c2FnZSBwYXJ0aWN1bGllciBldCBk4oCZYWJzZW5jZSBkZSBjb250cmVmYcOnb24gc29udCBleGNsdWVzLgoKTElNSVRBVElPTiBERVMgRE9NTUFHRVMtSU5Uw4lSw4pUUyBFVCBFWENMVVNJT04gREUgUkVTUE9OU0FCSUxJVMOJIFBPVVIgTEVTIERPTU1BR0VTLiBWb3VzIHBvdXZleiBvYnRlbmlyIGRlIE1pY3Jvc29mdCBldCBkZSBzZXMgZm91cm5pc3NldXJzIHVuZSBpbmRlbW5pc2F0aW9uIGVuIGNhcyBkZSBkb21tYWdlcyBkaXJlY3RzIHVuaXF1ZW1lbnQgw6AgaGF1dGV1ciBkZSA1LDAwICQgVVMuIFZvdXMgbmUgcG91dmV6IHByw6l0ZW5kcmUgw6AgYXVjdW5lIGluZGVtbmlzYXRpb24gcG91ciBsZXMgYXV0cmVzIGRvbW1hZ2VzLCB5IGNvbXByaXMgbGVzIGRvbW1hZ2VzIHNww6ljaWF1eCwgaW5kaXJlY3RzIG91IGFjY2Vzc29pcmVzIGV0IHBlcnRlcyBkZSBiw6luw6lmaWNlcy4KCkNldHRlIGxpbWl0YXRpb24gY29uY2VybmUgOgoKwrcgICAgICAgICB0b3V0IGNlIHF1aSBlc3QgcmVsacOpIGF1IGxvZ2ljaWVsLCBhdXggc2VydmljZXMgb3UgYXUgY29udGVudSAoeSBjb21wcmlzIGxlIGNvZGUpIGZpZ3VyYW50IHN1ciBkZXMgc2l0ZXMgSW50ZXJuZXQgdGllcnMgb3UgZGFucyBkZXMgcHJvZ3JhbW1lcyB0aWVycyA7IGV0CsK3ICAgICAgICAgbGVzIHLDqWNsYW1hdGlvbnMgYXUgdGl0cmUgZGUgdmlvbGF0aW9uIGRlIGNvbnRyYXQgb3UgZGUgZ2FyYW50aWUsIG91IGF1IHRpdHJlIGRlIHJlc3BvbnNhYmlsaXTDqSBzdHJpY3RlLCBkZSBuw6lnbGlnZW5jZSBvdSBk4oCZdW5lIGF1dHJlIGZhdXRlIGRhbnMgbGEgbGltaXRlIGF1dG9yaXPDqWUgcGFyIGxhIGxvaSBlbiB2aWd1ZXVyLgoKRWxsZSBz4oCZYXBwbGlxdWUgw6lnYWxlbWVudCwgbcOqbWUgc2kgTWljcm9zb2Z0IGNvbm5haXNzYWl0IG91IGRldnJhaXQgY29ubmHDrnRyZSBs4oCZw6l2ZW50dWFsaXTDqSBk4oCZdW4gdGVsIGRvbW1hZ2UuIFNpIHZvdHJlIHBheXMgbuKAmWF1dG9yaXNlIHBhcyBs4oCZZXhjbHVzaW9uIG91IGxhIGxpbWl0YXRpb24gZGUgcmVzcG9uc2FiaWxpdMOpIHBvdXIgbGVzIGRvbW1hZ2VzIGluZGlyZWN0cywgYWNjZXNzb2lyZXMgb3UgZGUgcXVlbHF1ZSBuYXR1cmUgcXVlIGNlIHNvaXQsIGlsIHNlIHBldXQgcXVlIGxhIGxpbWl0YXRpb24gb3UgbOKAmWV4Y2x1c2lvbiBjaS1kZXNzdXMgbmUgc+KAmWFwcGxpcXVlcmEgcGFzIMOgIHZvdHJlIMOpZ2FyZC4KCkVGRkVUIEpVUklESVFVRS4gTGUgcHLDqXNlbnQgY29udHJhdCBkw6ljcml0IGNlcnRhaW5zIGRyb2l0cyBqdXJpZGlxdWVzLiBWb3VzIHBvdXJyaWV6IGF2b2lyIGTigJlhdXRyZXMgZHJvaXRzIHByw6l2dXMgcGFyIGxlcyBsb2lzIGRlIHZvdHJlIHBheXMuIExlIHByw6lzZW50IGNvbnRyYXQgbmUgbW9kaWZpZSBwYXMgbGVzIGRyb2l0cyBxdWUgdm91cyBjb25mw6hyZW50IGxlcyBsb2lzIGRlIHZvdHJlIHBheXMgc2kgY2VsbGVzLWNpIG5lIGxlIHBlcm1ldHRlbnQgcGFzLg==","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.FileSystems@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.FileSystems/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2015-02-20T01:33:41+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Host.HttpListener@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Host.HttpListener","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"CgpNSUNST1NPRlQgU09GVFdBUkUgTElDRU5TRSBURVJNUwoKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQoKVGhlc2UgbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpLiBUaGV5IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSBuYW1lZCBhYm92ZS4gVGhlIHRlcm1zIGFsc28gYXBwbHkgdG8gYW55IE1pY3Jvc29mdCBzZXJ2aWNlcyBvciB1cGRhdGVzIGZvciB0aGUgc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLgoKSWYgeW91IGNvbXBseSB3aXRoIHRoZXNlIGxpY2Vuc2UgdGVybXMsIHlvdSBoYXZlIHRoZSByaWdodHMgYmVsb3cuCjEuICAgIElOU1RBTExBVElPTiBBTkQgVVNFIFJJR0hUUy4KCllvdSBtYXkgaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSB0byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiAKMi4gICAgVEhJUkQgUEFSVFkgQ09NUE9ORU5UUy4gVGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aCBzZXBhcmF0ZSBsZWdhbCBub3RpY2VzIG9yIGdvdmVybmVkIGJ5IG90aGVyIGFncmVlbWVudHMsIGFzIG1heSBiZSBkZXNjcmliZWQgaW4gdGhlIFRoaXJkUGFydHlOb3RpY2VzIGZpbGUocykgYWNjb21wYW55aW5nIHRoZSBzb2Z0d2FyZS4KMy4gICAgQURESVRJT05BTCBMSUNFTlNJTkcgUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLgphLiAgICAgRElTVFJJQlVUQUJMRSBDT0RFLiAgVGhlIHNvZnR3YXJlIGlzIGNvbXByaXNlZCBvZiBEaXN0cmlidXRhYmxlIENvZGUuIOKAnERpc3RyaWJ1dGFibGUgQ29kZeKAnSBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBhcHBsaWNhdGlvbnMgeW91IGRldmVsb3AgaWYgeW91IGNvbXBseSB3aXRoIHRoZSB0ZXJtcyBiZWxvdy4KaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgWW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS4KCsK3ICAgICAgICBUaGlyZCBQYXJ0eSBEaXN0cmlidXRpb24uIFlvdSBtYXkgcGVybWl0IGRpc3RyaWJ1dG9ycyBvZiB5b3VyIGFwcGxpY2F0aW9ucyB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuCmlpLiAgICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgdXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhIHN0YW5kYWxvbmUgZGlzdHJpYnV0aW9uOwoKwrcgICAgICAgIHJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdCBwcm90ZWN0IGl0IGF0IGxlYXN0IGFzIG11Y2ggYXMgdGhpcyBhZ3JlZW1lbnQ7IGFuZAoKwrcgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBhcHBsaWNhdGlvbnMsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlIENvZGUuCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgIHVzZSBNaWNyb3NvZnTigJlzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIGFwcGxpY2F0aW9ucyBjb21lIGZyb20gb3IgYXJlIGVuZG9yc2VkIGJ5IE1pY3Jvc29mdDsgb3IKCsK3ICAgICAgICBtb2RpZnkgb3IgZGlzdHJpYnV0ZSB0aGUgc291cmNlIGNvZGUgb2YgYW55IERpc3RyaWJ1dGFibGUgQ29kZSBzbyB0aGF0IGFueSBwYXJ0IG9mIGl0IGJlY29tZXMgc3ViamVjdCB0byBhbiBFeGNsdWRlZCBMaWNlbnNlLiBBbiDigJxFeGNsdWRlZCBMaWNlbnNl4oCdIGlzIG9uZSB0aGF0IHJlcXVpcmVzLCBhcyBhIGNvbmRpdGlvbiBvZiB1c2UsIG1vZGlmaWNhdGlvbiBvciBkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlIGZvcm07IG9yIChpaSkgb3RoZXJzIGhhdmUgdGhlIHJpZ2h0IHRvIG1vZGlmeSBpdC4KNC4gICAgREFUQS4KYS4gICAgIERhdGEgQ29sbGVjdGlvbi4gVGhlIHNvZnR3YXJlIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4gTWljcm9zb2Z0IG1heSB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBpbXByb3ZlIG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXMuICBZb3UgbWF5IG9wdC1vdXQgb2YgbWFueSBvZiB0aGVzZSBzY2VuYXJpb3MsIGJ1dCBub3QgYWxsLCBhcyBkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uICBUaGVyZSBhcmUgYWxzbyBzb21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZCBNaWNyb3NvZnQgdG8gY29sbGVjdCBkYXRhIGZyb20gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMuIElmIHlvdSB1c2UgdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nIGFwcHJvcHJpYXRlIG5vdGljZXMgdG8gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMgdG9nZXRoZXIgd2l0aCBNaWNyb3NvZnTigJlzIHByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCBodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgZGF0YSBjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5IHN0YXRlbWVudC4gWW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlIG9wZXJhdGVzIGFzIHlvdXIgY29uc2VudCB0byB0aGVzZSBwcmFjdGljZXMuCmIuICAgIFByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gVG8gdGhlIGV4dGVudCBNaWNyb3NvZnQgaXMgYSBwcm9jZXNzb3Igb3Igc3VicHJvY2Vzc29yIG9mIHBlcnNvbmFsIGRhdGEgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBzb2Z0d2FyZSwgTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbiBUZXJtcyBvZiB0aGUgT25saW5lIFNlcnZpY2VzIFRlcm1zIHRvIGFsbCBjdXN0b21lcnMgZWZmZWN0aXZlIE1heSAyNSwgMjAxOCwgYXQgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbGVnYWwvZ2Rwci4KNS4gICAgU2NvcGUgb2YgTGljZW5zZS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgd29yayBhcm91bmQgYW55IHRlY2huaWNhbCBsaW1pdGF0aW9ucyBpbiB0aGUgc29mdHdhcmU7CgrCtyAgICAgICAgcmV2ZXJzZSBlbmdpbmVlciwgZGVjb21waWxlIG9yIGRpc2Fzc2VtYmxlIHRoZSBzb2Z0d2FyZSwgb3Igb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zIGdvdmVybmluZyB1c2Ugb2YgY2VydGFpbiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIHRoYXQgbWF5IGJlIGluY2x1ZGVkIGluIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICByZW1vdmUsIG1pbmltaXplLCBibG9jayBvciBtb2RpZnkgYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgIHVzZSB0aGUgc29mdHdhcmUgaW4gYW55IHdheSB0aGF0IGlzIGFnYWluc3QgdGhlIGxhdzsgb3IKCsK3ICAgICAgICBzaGFyZSwgcHVibGlzaCwgcmVudCBvciBsZWFzZSB0aGUgc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yIHRyYW5zZmVyIHRoZSBzb2Z0d2FyZSBvciB0aGlzIGFncmVlbWVudCB0byBhbnkgdGhpcmQgcGFydHkuCjYuICAgIEV4cG9ydCBSZXN0cmljdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUsIHdoaWNoIGluY2x1ZGUgcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gZXhwb3J0IHJlc3RyaWN0aW9ucywgdmlzaXQgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLiAgCjcuICAgIFNVUFBPUlQgU0VSVklDRVMuIEJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyDigJxhcyBpcyzigJ0gd2UgbWF5IG5vdCBwcm92aWRlIHN1cHBvcnQgc2VydmljZXMgZm9yIGl0Lgo4LiAgICBFbnRpcmUgQWdyZWVtZW50LiBUaGlzIGFncmVlbWVudCwgYW5kIHRoZSB0ZXJtcyBmb3Igc3VwcGxlbWVudHMsIHVwZGF0ZXMsIEludGVybmV0LWJhc2VkIHNlcnZpY2VzIGFuZCBzdXBwb3J0IHNlcnZpY2VzIHRoYXQgeW91IHVzZSwgYXJlIHRoZSBlbnRpcmUgYWdyZWVtZW50IGZvciB0aGUgc29mdHdhcmUgYW5kIHN1cHBvcnQgc2VydmljZXMuCjkuICAgIEFwcGxpY2FibGUgTGF3LiAgSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBsYXcgYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgYXBwbHkgdG8gYWxsIG90aGVyIGNsYWltcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBhbnkgb3RoZXIgY291bnRyeSwgaXRzIGxhd3MgYXBwbHkuCjEwLiBDT05TVU1FUiBSSUdIVFM7IFJFR0lPTkFMIFZBUklBVElPTlMuIFRoaXMgYWdyZWVtZW50IGRlc2NyaWJlcyBjZXJ0YWluIGxlZ2FsIHJpZ2h0cy4gWW91IG1heSBoYXZlIG90aGVyIHJpZ2h0cywgaW5jbHVkaW5nIGNvbnN1bWVyIHJpZ2h0cywgdW5kZXIgdGhlIGxhd3Mgb2YgeW91ciBzdGF0ZSBvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aGljaCB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlLiBUaGlzIGFncmVlbWVudCBkb2VzIG5vdCBjaGFuZ2UgdGhvc2Ugb3RoZXIgcmlnaHRzIGlmIHRoZSBsYXdzIG9mIHlvdXIgc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBvbmUgb2YgdGhlIGJlbG93IHJlZ2lvbnMsIG9yIG1hbmRhdG9yeSBjb3VudHJ5IGxhdyBhcHBsaWVzLCB0aGVuIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBhcHBseSB0byB5b3U6CmEpICAgIEF1c3RyYWxpYS4gWW91IGhhdmUgc3RhdHV0b3J5IGd1YXJhbnRlZXMgdW5kZXIgdGhlIEF1c3RyYWxpYW4gQ29uc3VtZXIgTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuCmIpICAgIENhbmFkYS4gSWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3AgcmVjZWl2aW5nIHVwZGF0ZXMgYnkgdHVybmluZyBvZmYgdGhlIGF1dG9tYXRpYyB1cGRhdGUgZmVhdHVyZSwgZGlzY29ubmVjdGluZyB5b3VyIGRldmljZSBmcm9tIHRoZSBJbnRlcm5ldCAoaWYgYW5kIHdoZW4geW91IHJlLWNvbm5lY3QgdG8gdGhlIEludGVybmV0LCBob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcgdGhlIHNvZnR3YXJlLiBUaGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uLCBpZiBhbnksIG1heSBhbHNvIHNwZWNpZnkgaG93IHRvIHR1cm4gb2ZmIHVwZGF0ZXMgZm9yIHlvdXIgc3BlY2lmaWMgZGV2aWNlIG9yIHNvZnR3YXJlLgpjKSAgICBHZXJtYW55IGFuZCBBdXN0cmlhLgoKKGkpICAgICAgICBXYXJyYW50eS4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybSBzdWJzdGFudGlhbGx5IGFzIGRlc2NyaWJlZCBpbiBhbnkgTWljcm9zb2Z0IG1hdGVyaWFscyB0aGF0IGFjY29tcGFueSBpdC4gSG93ZXZlciwgTWljcm9zb2Z0IGdpdmVzIG5vIGNvbnRyYWN0dWFsIGd1YXJhbnRlZSBpbiByZWxhdGlvbiB0byB0aGUgc29mdHdhcmUuCgooaWkpICAgICAgIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBjYXNlIG9mIGludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkgQWN0LCBhcyB3ZWxsIGFzIGluIGNhc2Ugb2YgZGVhdGggb3IgcGVyc29uYWwgb3IgcGh5c2ljYWwgaW5qdXJ5LCBNaWNyb3NvZnQgaXMgbGlhYmxlIGFjY29yZGluZyB0byB0aGUgc3RhdHV0b3J5IGxhdy4KU3ViamVjdCB0byB0aGUgZm9yZWdvaW5nIGNsYXVzZSAoaWkpLCBNaWNyb3NvZnQgd2lsbCBvbmx5IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2UgaWYgTWljcm9zb2Z0IGlzIGluIGJyZWFjaCBvZiBzdWNoIG1hdGVyaWFsIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlIHBlcmZvcm1hbmNlIG9mIHRoaXMgYWdyZWVtZW50LCB0aGUgYnJlYWNoIG9mIHdoaWNoIHdvdWxkIGVuZGFuZ2VyIHRoZSBwdXJwb3NlIG9mIHRoaXMgYWdyZWVtZW50IGFuZCB0aGUgY29tcGxpYW5jZSB3aXRoIHdoaWNoIGEgcGFydHkgbWF5IGNvbnN0YW50bHkgdHJ1c3QgaW4gKHNvLWNhbGxlZCAiY2FyZGluYWwgb2JsaWdhdGlvbnMiKS4gSW4gb3RoZXIgY2FzZXMgb2Ygc2xpZ2h0IG5lZ2xpZ2VuY2UsIE1pY3Jvc29mdCB3aWxsIG5vdCBiZSBsaWFibGUgZm9yIHNsaWdodCBuZWdsaWdlbmNlCjExLiBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBUSEUgU09GVFdBUkUgSVMgTElDRU5TRUQg4oCcQVMtSVMu4oCdIFlPVSBCRUFSIFRIRSBSSVNLIE9GIFVTSU5HIElULiBNSUNST1NPRlQgR0lWRVMgTk8gRVhQUkVTUyBXQVJSQU5USUVTLCBHVUFSQU5URUVTIE9SIENPTkRJVElPTlMuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KMTIuIExpbWl0YXRpb24gb24gYW5kIEV4Y2x1c2lvbiBvZiBSZW1lZGllcyBhbmQgRGFtYWdlcy4gWU9VIENBTiBSRUNPVkVSIEZST00gTUlDUk9TT0ZUIEFORCBJVFMgU1VQUExJRVJTIE9OTFkgRElSRUNUIERBTUFHRVMgVVAgVE8gVS5TLiAkNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVCBQUk9GSVRTLCBTUEVDSUFMLCBJTkRJUkVDVCBPUiBJTkNJREVOVEFMIERBTUFHRVMuCgpUaGlzIGxpbWl0YXRpb24gYXBwbGllcyB0byAoYSkgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZiBjb250cmFjdCwgYnJlYWNoIG9mIHdhcnJhbnR5LCBndWFyYW50ZWUgb3IgY29uZGl0aW9uLCBzdHJpY3QgbGlhYmlsaXR5LCBuZWdsaWdlbmNlLCBvciBvdGhlciB0b3J0IHRvIHRoZSBleHRlbnQgcGVybWl0dGVkIGJ5IGFwcGxpY2FibGUgbGF3LgoKSXQgYWxzbyBhcHBsaWVzIGV2ZW4gaWYgTWljcm9zb2Z0IGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gYWJvdXQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZSB5b3VyIHN0YXRlIG9yIGNvdW50cnkgbWF5IG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgaW5jaWRlbnRhbCwgY29uc2VxdWVudGlhbCBvciBvdGhlciBkYW1hZ2VzLgoKIAo=","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Host.HttpListener@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Host.HttpListener/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"published_at","value":"2015-02-20T01:34:56+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Host.SystemWeb@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Host.SystemWeb","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Host.SystemWeb@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Host.SystemWeb/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"published_at","value":"2015-02-20T01:42:27+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Hosting@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Hosting","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"CgpNSUNST1NPRlQgU09GVFdBUkUgTElDRU5TRSBURVJNUwoKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQoKVGhlc2UgbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpLiBUaGV5IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSBuYW1lZCBhYm92ZS4gVGhlIHRlcm1zIGFsc28gYXBwbHkgdG8gYW55IE1pY3Jvc29mdCBzZXJ2aWNlcyBvciB1cGRhdGVzIGZvciB0aGUgc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLgoKSWYgeW91IGNvbXBseSB3aXRoIHRoZXNlIGxpY2Vuc2UgdGVybXMsIHlvdSBoYXZlIHRoZSByaWdodHMgYmVsb3cuCjEuICAgIElOU1RBTExBVElPTiBBTkQgVVNFIFJJR0hUUy4KCllvdSBtYXkgaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSB0byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiAKMi4gICAgVEhJUkQgUEFSVFkgQ09NUE9ORU5UUy4gVGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aCBzZXBhcmF0ZSBsZWdhbCBub3RpY2VzIG9yIGdvdmVybmVkIGJ5IG90aGVyIGFncmVlbWVudHMsIGFzIG1heSBiZSBkZXNjcmliZWQgaW4gdGhlIFRoaXJkUGFydHlOb3RpY2VzIGZpbGUocykgYWNjb21wYW55aW5nIHRoZSBzb2Z0d2FyZS4KMy4gICAgQURESVRJT05BTCBMSUNFTlNJTkcgUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLgphLiAgICAgRElTVFJJQlVUQUJMRSBDT0RFLiAgVGhlIHNvZnR3YXJlIGlzIGNvbXByaXNlZCBvZiBEaXN0cmlidXRhYmxlIENvZGUuIOKAnERpc3RyaWJ1dGFibGUgQ29kZeKAnSBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBhcHBsaWNhdGlvbnMgeW91IGRldmVsb3AgaWYgeW91IGNvbXBseSB3aXRoIHRoZSB0ZXJtcyBiZWxvdy4KaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgWW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS4KCsK3ICAgICAgICBUaGlyZCBQYXJ0eSBEaXN0cmlidXRpb24uIFlvdSBtYXkgcGVybWl0IGRpc3RyaWJ1dG9ycyBvZiB5b3VyIGFwcGxpY2F0aW9ucyB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuCmlpLiAgICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgdXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhIHN0YW5kYWxvbmUgZGlzdHJpYnV0aW9uOwoKwrcgICAgICAgIHJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdCBwcm90ZWN0IGl0IGF0IGxlYXN0IGFzIG11Y2ggYXMgdGhpcyBhZ3JlZW1lbnQ7IGFuZAoKwrcgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBhcHBsaWNhdGlvbnMsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlIENvZGUuCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgIHVzZSBNaWNyb3NvZnTigJlzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIGFwcGxpY2F0aW9ucyBjb21lIGZyb20gb3IgYXJlIGVuZG9yc2VkIGJ5IE1pY3Jvc29mdDsgb3IKCsK3ICAgICAgICBtb2RpZnkgb3IgZGlzdHJpYnV0ZSB0aGUgc291cmNlIGNvZGUgb2YgYW55IERpc3RyaWJ1dGFibGUgQ29kZSBzbyB0aGF0IGFueSBwYXJ0IG9mIGl0IGJlY29tZXMgc3ViamVjdCB0byBhbiBFeGNsdWRlZCBMaWNlbnNlLiBBbiDigJxFeGNsdWRlZCBMaWNlbnNl4oCdIGlzIG9uZSB0aGF0IHJlcXVpcmVzLCBhcyBhIGNvbmRpdGlvbiBvZiB1c2UsIG1vZGlmaWNhdGlvbiBvciBkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlIGZvcm07IG9yIChpaSkgb3RoZXJzIGhhdmUgdGhlIHJpZ2h0IHRvIG1vZGlmeSBpdC4KNC4gICAgREFUQS4KYS4gICAgIERhdGEgQ29sbGVjdGlvbi4gVGhlIHNvZnR3YXJlIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4gTWljcm9zb2Z0IG1heSB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBpbXByb3ZlIG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXMuICBZb3UgbWF5IG9wdC1vdXQgb2YgbWFueSBvZiB0aGVzZSBzY2VuYXJpb3MsIGJ1dCBub3QgYWxsLCBhcyBkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uICBUaGVyZSBhcmUgYWxzbyBzb21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZCBNaWNyb3NvZnQgdG8gY29sbGVjdCBkYXRhIGZyb20gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMuIElmIHlvdSB1c2UgdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nIGFwcHJvcHJpYXRlIG5vdGljZXMgdG8gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMgdG9nZXRoZXIgd2l0aCBNaWNyb3NvZnTigJlzIHByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCBodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgZGF0YSBjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5IHN0YXRlbWVudC4gWW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlIG9wZXJhdGVzIGFzIHlvdXIgY29uc2VudCB0byB0aGVzZSBwcmFjdGljZXMuCmIuICAgIFByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gVG8gdGhlIGV4dGVudCBNaWNyb3NvZnQgaXMgYSBwcm9jZXNzb3Igb3Igc3VicHJvY2Vzc29yIG9mIHBlcnNvbmFsIGRhdGEgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBzb2Z0d2FyZSwgTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbiBUZXJtcyBvZiB0aGUgT25saW5lIFNlcnZpY2VzIFRlcm1zIHRvIGFsbCBjdXN0b21lcnMgZWZmZWN0aXZlIE1heSAyNSwgMjAxOCwgYXQgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbGVnYWwvZ2Rwci4KNS4gICAgU2NvcGUgb2YgTGljZW5zZS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgd29yayBhcm91bmQgYW55IHRlY2huaWNhbCBsaW1pdGF0aW9ucyBpbiB0aGUgc29mdHdhcmU7CgrCtyAgICAgICAgcmV2ZXJzZSBlbmdpbmVlciwgZGVjb21waWxlIG9yIGRpc2Fzc2VtYmxlIHRoZSBzb2Z0d2FyZSwgb3Igb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zIGdvdmVybmluZyB1c2Ugb2YgY2VydGFpbiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIHRoYXQgbWF5IGJlIGluY2x1ZGVkIGluIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICByZW1vdmUsIG1pbmltaXplLCBibG9jayBvciBtb2RpZnkgYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgIHVzZSB0aGUgc29mdHdhcmUgaW4gYW55IHdheSB0aGF0IGlzIGFnYWluc3QgdGhlIGxhdzsgb3IKCsK3ICAgICAgICBzaGFyZSwgcHVibGlzaCwgcmVudCBvciBsZWFzZSB0aGUgc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yIHRyYW5zZmVyIHRoZSBzb2Z0d2FyZSBvciB0aGlzIGFncmVlbWVudCB0byBhbnkgdGhpcmQgcGFydHkuCjYuICAgIEV4cG9ydCBSZXN0cmljdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUsIHdoaWNoIGluY2x1ZGUgcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gZXhwb3J0IHJlc3RyaWN0aW9ucywgdmlzaXQgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLiAgCjcuICAgIFNVUFBPUlQgU0VSVklDRVMuIEJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyDigJxhcyBpcyzigJ0gd2UgbWF5IG5vdCBwcm92aWRlIHN1cHBvcnQgc2VydmljZXMgZm9yIGl0Lgo4LiAgICBFbnRpcmUgQWdyZWVtZW50LiBUaGlzIGFncmVlbWVudCwgYW5kIHRoZSB0ZXJtcyBmb3Igc3VwcGxlbWVudHMsIHVwZGF0ZXMsIEludGVybmV0LWJhc2VkIHNlcnZpY2VzIGFuZCBzdXBwb3J0IHNlcnZpY2VzIHRoYXQgeW91IHVzZSwgYXJlIHRoZSBlbnRpcmUgYWdyZWVtZW50IGZvciB0aGUgc29mdHdhcmUgYW5kIHN1cHBvcnQgc2VydmljZXMuCjkuICAgIEFwcGxpY2FibGUgTGF3LiAgSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBsYXcgYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgYXBwbHkgdG8gYWxsIG90aGVyIGNsYWltcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBhbnkgb3RoZXIgY291bnRyeSwgaXRzIGxhd3MgYXBwbHkuCjEwLiBDT05TVU1FUiBSSUdIVFM7IFJFR0lPTkFMIFZBUklBVElPTlMuIFRoaXMgYWdyZWVtZW50IGRlc2NyaWJlcyBjZXJ0YWluIGxlZ2FsIHJpZ2h0cy4gWW91IG1heSBoYXZlIG90aGVyIHJpZ2h0cywgaW5jbHVkaW5nIGNvbnN1bWVyIHJpZ2h0cywgdW5kZXIgdGhlIGxhd3Mgb2YgeW91ciBzdGF0ZSBvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aGljaCB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlLiBUaGlzIGFncmVlbWVudCBkb2VzIG5vdCBjaGFuZ2UgdGhvc2Ugb3RoZXIgcmlnaHRzIGlmIHRoZSBsYXdzIG9mIHlvdXIgc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBvbmUgb2YgdGhlIGJlbG93IHJlZ2lvbnMsIG9yIG1hbmRhdG9yeSBjb3VudHJ5IGxhdyBhcHBsaWVzLCB0aGVuIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBhcHBseSB0byB5b3U6CmEpICAgIEF1c3RyYWxpYS4gWW91IGhhdmUgc3RhdHV0b3J5IGd1YXJhbnRlZXMgdW5kZXIgdGhlIEF1c3RyYWxpYW4gQ29uc3VtZXIgTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuCmIpICAgIENhbmFkYS4gSWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3AgcmVjZWl2aW5nIHVwZGF0ZXMgYnkgdHVybmluZyBvZmYgdGhlIGF1dG9tYXRpYyB1cGRhdGUgZmVhdHVyZSwgZGlzY29ubmVjdGluZyB5b3VyIGRldmljZSBmcm9tIHRoZSBJbnRlcm5ldCAoaWYgYW5kIHdoZW4geW91IHJlLWNvbm5lY3QgdG8gdGhlIEludGVybmV0LCBob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcgdGhlIHNvZnR3YXJlLiBUaGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uLCBpZiBhbnksIG1heSBhbHNvIHNwZWNpZnkgaG93IHRvIHR1cm4gb2ZmIHVwZGF0ZXMgZm9yIHlvdXIgc3BlY2lmaWMgZGV2aWNlIG9yIHNvZnR3YXJlLgpjKSAgICBHZXJtYW55IGFuZCBBdXN0cmlhLgoKKGkpICAgICAgICBXYXJyYW50eS4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybSBzdWJzdGFudGlhbGx5IGFzIGRlc2NyaWJlZCBpbiBhbnkgTWljcm9zb2Z0IG1hdGVyaWFscyB0aGF0IGFjY29tcGFueSBpdC4gSG93ZXZlciwgTWljcm9zb2Z0IGdpdmVzIG5vIGNvbnRyYWN0dWFsIGd1YXJhbnRlZSBpbiByZWxhdGlvbiB0byB0aGUgc29mdHdhcmUuCgooaWkpICAgICAgIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBjYXNlIG9mIGludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkgQWN0LCBhcyB3ZWxsIGFzIGluIGNhc2Ugb2YgZGVhdGggb3IgcGVyc29uYWwgb3IgcGh5c2ljYWwgaW5qdXJ5LCBNaWNyb3NvZnQgaXMgbGlhYmxlIGFjY29yZGluZyB0byB0aGUgc3RhdHV0b3J5IGxhdy4KU3ViamVjdCB0byB0aGUgZm9yZWdvaW5nIGNsYXVzZSAoaWkpLCBNaWNyb3NvZnQgd2lsbCBvbmx5IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2UgaWYgTWljcm9zb2Z0IGlzIGluIGJyZWFjaCBvZiBzdWNoIG1hdGVyaWFsIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlIHBlcmZvcm1hbmNlIG9mIHRoaXMgYWdyZWVtZW50LCB0aGUgYnJlYWNoIG9mIHdoaWNoIHdvdWxkIGVuZGFuZ2VyIHRoZSBwdXJwb3NlIG9mIHRoaXMgYWdyZWVtZW50IGFuZCB0aGUgY29tcGxpYW5jZSB3aXRoIHdoaWNoIGEgcGFydHkgbWF5IGNvbnN0YW50bHkgdHJ1c3QgaW4gKHNvLWNhbGxlZCAiY2FyZGluYWwgb2JsaWdhdGlvbnMiKS4gSW4gb3RoZXIgY2FzZXMgb2Ygc2xpZ2h0IG5lZ2xpZ2VuY2UsIE1pY3Jvc29mdCB3aWxsIG5vdCBiZSBsaWFibGUgZm9yIHNsaWdodCBuZWdsaWdlbmNlCjExLiBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBUSEUgU09GVFdBUkUgSVMgTElDRU5TRUQg4oCcQVMtSVMu4oCdIFlPVSBCRUFSIFRIRSBSSVNLIE9GIFVTSU5HIElULiBNSUNST1NPRlQgR0lWRVMgTk8gRVhQUkVTUyBXQVJSQU5USUVTLCBHVUFSQU5URUVTIE9SIENPTkRJVElPTlMuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KMTIuIExpbWl0YXRpb24gb24gYW5kIEV4Y2x1c2lvbiBvZiBSZW1lZGllcyBhbmQgRGFtYWdlcy4gWU9VIENBTiBSRUNPVkVSIEZST00gTUlDUk9TT0ZUIEFORCBJVFMgU1VQUExJRVJTIE9OTFkgRElSRUNUIERBTUFHRVMgVVAgVE8gVS5TLiAkNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVCBQUk9GSVRTLCBTUEVDSUFMLCBJTkRJUkVDVCBPUiBJTkNJREVOVEFMIERBTUFHRVMuCgpUaGlzIGxpbWl0YXRpb24gYXBwbGllcyB0byAoYSkgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZiBjb250cmFjdCwgYnJlYWNoIG9mIHdhcnJhbnR5LCBndWFyYW50ZWUgb3IgY29uZGl0aW9uLCBzdHJpY3QgbGlhYmlsaXR5LCBuZWdsaWdlbmNlLCBvciBvdGhlciB0b3J0IHRvIHRoZSBleHRlbnQgcGVybWl0dGVkIGJ5IGFwcGxpY2FibGUgbGF3LgoKSXQgYWxzbyBhcHBsaWVzIGV2ZW4gaWYgTWljcm9zb2Z0IGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gYWJvdXQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZSB5b3VyIHN0YXRlIG9yIGNvdW50cnkgbWF5IG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgaW5jaWRlbnRhbCwgY29uc2VxdWVudGlhbCBvciBvdGhlciBkYW1hZ2VzLgoKIAo=","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Hosting@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Hosting/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T01:49:54+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T02:01:01+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.Cookies@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.Cookies","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.Cookies@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.Cookies/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T02:02:11+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.Facebook@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.Facebook","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"CgpNSUNST1NPRlQgU09GVFdBUkUgTElDRU5TRSBURVJNUwoKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQoKVGhlc2UgbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpLiBUaGV5IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSBuYW1lZCBhYm92ZS4gVGhlIHRlcm1zIGFsc28gYXBwbHkgdG8gYW55IE1pY3Jvc29mdCBzZXJ2aWNlcyBvciB1cGRhdGVzIGZvciB0aGUgc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLgoKSWYgeW91IGNvbXBseSB3aXRoIHRoZXNlIGxpY2Vuc2UgdGVybXMsIHlvdSBoYXZlIHRoZSByaWdodHMgYmVsb3cuCjEuICAgIElOU1RBTExBVElPTiBBTkQgVVNFIFJJR0hUUy4KCllvdSBtYXkgaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSB0byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiAKMi4gICAgVEhJUkQgUEFSVFkgQ09NUE9ORU5UUy4gVGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aCBzZXBhcmF0ZSBsZWdhbCBub3RpY2VzIG9yIGdvdmVybmVkIGJ5IG90aGVyIGFncmVlbWVudHMsIGFzIG1heSBiZSBkZXNjcmliZWQgaW4gdGhlIFRoaXJkUGFydHlOb3RpY2VzIGZpbGUocykgYWNjb21wYW55aW5nIHRoZSBzb2Z0d2FyZS4KMy4gICAgQURESVRJT05BTCBMSUNFTlNJTkcgUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLgphLiAgICAgRElTVFJJQlVUQUJMRSBDT0RFLiAgVGhlIHNvZnR3YXJlIGlzIGNvbXByaXNlZCBvZiBEaXN0cmlidXRhYmxlIENvZGUuIOKAnERpc3RyaWJ1dGFibGUgQ29kZeKAnSBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBhcHBsaWNhdGlvbnMgeW91IGRldmVsb3AgaWYgeW91IGNvbXBseSB3aXRoIHRoZSB0ZXJtcyBiZWxvdy4KaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgWW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS4KCsK3ICAgICAgICBUaGlyZCBQYXJ0eSBEaXN0cmlidXRpb24uIFlvdSBtYXkgcGVybWl0IGRpc3RyaWJ1dG9ycyBvZiB5b3VyIGFwcGxpY2F0aW9ucyB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuCmlpLiAgICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgdXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhIHN0YW5kYWxvbmUgZGlzdHJpYnV0aW9uOwoKwrcgICAgICAgIHJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdCBwcm90ZWN0IGl0IGF0IGxlYXN0IGFzIG11Y2ggYXMgdGhpcyBhZ3JlZW1lbnQ7IGFuZAoKwrcgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBhcHBsaWNhdGlvbnMsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlIENvZGUuCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgIHVzZSBNaWNyb3NvZnTigJlzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIGFwcGxpY2F0aW9ucyBjb21lIGZyb20gb3IgYXJlIGVuZG9yc2VkIGJ5IE1pY3Jvc29mdDsgb3IKCsK3ICAgICAgICBtb2RpZnkgb3IgZGlzdHJpYnV0ZSB0aGUgc291cmNlIGNvZGUgb2YgYW55IERpc3RyaWJ1dGFibGUgQ29kZSBzbyB0aGF0IGFueSBwYXJ0IG9mIGl0IGJlY29tZXMgc3ViamVjdCB0byBhbiBFeGNsdWRlZCBMaWNlbnNlLiBBbiDigJxFeGNsdWRlZCBMaWNlbnNl4oCdIGlzIG9uZSB0aGF0IHJlcXVpcmVzLCBhcyBhIGNvbmRpdGlvbiBvZiB1c2UsIG1vZGlmaWNhdGlvbiBvciBkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlIGZvcm07IG9yIChpaSkgb3RoZXJzIGhhdmUgdGhlIHJpZ2h0IHRvIG1vZGlmeSBpdC4KNC4gICAgREFUQS4KYS4gICAgIERhdGEgQ29sbGVjdGlvbi4gVGhlIHNvZnR3YXJlIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4gTWljcm9zb2Z0IG1heSB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBpbXByb3ZlIG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXMuICBZb3UgbWF5IG9wdC1vdXQgb2YgbWFueSBvZiB0aGVzZSBzY2VuYXJpb3MsIGJ1dCBub3QgYWxsLCBhcyBkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uICBUaGVyZSBhcmUgYWxzbyBzb21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZCBNaWNyb3NvZnQgdG8gY29sbGVjdCBkYXRhIGZyb20gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMuIElmIHlvdSB1c2UgdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nIGFwcHJvcHJpYXRlIG5vdGljZXMgdG8gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMgdG9nZXRoZXIgd2l0aCBNaWNyb3NvZnTigJlzIHByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCBodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgZGF0YSBjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5IHN0YXRlbWVudC4gWW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlIG9wZXJhdGVzIGFzIHlvdXIgY29uc2VudCB0byB0aGVzZSBwcmFjdGljZXMuCmIuICAgIFByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gVG8gdGhlIGV4dGVudCBNaWNyb3NvZnQgaXMgYSBwcm9jZXNzb3Igb3Igc3VicHJvY2Vzc29yIG9mIHBlcnNvbmFsIGRhdGEgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBzb2Z0d2FyZSwgTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbiBUZXJtcyBvZiB0aGUgT25saW5lIFNlcnZpY2VzIFRlcm1zIHRvIGFsbCBjdXN0b21lcnMgZWZmZWN0aXZlIE1heSAyNSwgMjAxOCwgYXQgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbGVnYWwvZ2Rwci4KNS4gICAgU2NvcGUgb2YgTGljZW5zZS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgd29yayBhcm91bmQgYW55IHRlY2huaWNhbCBsaW1pdGF0aW9ucyBpbiB0aGUgc29mdHdhcmU7CgrCtyAgICAgICAgcmV2ZXJzZSBlbmdpbmVlciwgZGVjb21waWxlIG9yIGRpc2Fzc2VtYmxlIHRoZSBzb2Z0d2FyZSwgb3Igb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zIGdvdmVybmluZyB1c2Ugb2YgY2VydGFpbiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIHRoYXQgbWF5IGJlIGluY2x1ZGVkIGluIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICByZW1vdmUsIG1pbmltaXplLCBibG9jayBvciBtb2RpZnkgYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgIHVzZSB0aGUgc29mdHdhcmUgaW4gYW55IHdheSB0aGF0IGlzIGFnYWluc3QgdGhlIGxhdzsgb3IKCsK3ICAgICAgICBzaGFyZSwgcHVibGlzaCwgcmVudCBvciBsZWFzZSB0aGUgc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yIHRyYW5zZmVyIHRoZSBzb2Z0d2FyZSBvciB0aGlzIGFncmVlbWVudCB0byBhbnkgdGhpcmQgcGFydHkuCjYuICAgIEV4cG9ydCBSZXN0cmljdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUsIHdoaWNoIGluY2x1ZGUgcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gZXhwb3J0IHJlc3RyaWN0aW9ucywgdmlzaXQgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLiAgCjcuICAgIFNVUFBPUlQgU0VSVklDRVMuIEJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyDigJxhcyBpcyzigJ0gd2UgbWF5IG5vdCBwcm92aWRlIHN1cHBvcnQgc2VydmljZXMgZm9yIGl0Lgo4LiAgICBFbnRpcmUgQWdyZWVtZW50LiBUaGlzIGFncmVlbWVudCwgYW5kIHRoZSB0ZXJtcyBmb3Igc3VwcGxlbWVudHMsIHVwZGF0ZXMsIEludGVybmV0LWJhc2VkIHNlcnZpY2VzIGFuZCBzdXBwb3J0IHNlcnZpY2VzIHRoYXQgeW91IHVzZSwgYXJlIHRoZSBlbnRpcmUgYWdyZWVtZW50IGZvciB0aGUgc29mdHdhcmUgYW5kIHN1cHBvcnQgc2VydmljZXMuCjkuICAgIEFwcGxpY2FibGUgTGF3LiAgSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBsYXcgYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgYXBwbHkgdG8gYWxsIG90aGVyIGNsYWltcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBhbnkgb3RoZXIgY291bnRyeSwgaXRzIGxhd3MgYXBwbHkuCjEwLiBDT05TVU1FUiBSSUdIVFM7IFJFR0lPTkFMIFZBUklBVElPTlMuIFRoaXMgYWdyZWVtZW50IGRlc2NyaWJlcyBjZXJ0YWluIGxlZ2FsIHJpZ2h0cy4gWW91IG1heSBoYXZlIG90aGVyIHJpZ2h0cywgaW5jbHVkaW5nIGNvbnN1bWVyIHJpZ2h0cywgdW5kZXIgdGhlIGxhd3Mgb2YgeW91ciBzdGF0ZSBvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aGljaCB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlLiBUaGlzIGFncmVlbWVudCBkb2VzIG5vdCBjaGFuZ2UgdGhvc2Ugb3RoZXIgcmlnaHRzIGlmIHRoZSBsYXdzIG9mIHlvdXIgc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBvbmUgb2YgdGhlIGJlbG93IHJlZ2lvbnMsIG9yIG1hbmRhdG9yeSBjb3VudHJ5IGxhdyBhcHBsaWVzLCB0aGVuIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBhcHBseSB0byB5b3U6CmEpICAgIEF1c3RyYWxpYS4gWW91IGhhdmUgc3RhdHV0b3J5IGd1YXJhbnRlZXMgdW5kZXIgdGhlIEF1c3RyYWxpYW4gQ29uc3VtZXIgTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuCmIpICAgIENhbmFkYS4gSWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3AgcmVjZWl2aW5nIHVwZGF0ZXMgYnkgdHVybmluZyBvZmYgdGhlIGF1dG9tYXRpYyB1cGRhdGUgZmVhdHVyZSwgZGlzY29ubmVjdGluZyB5b3VyIGRldmljZSBmcm9tIHRoZSBJbnRlcm5ldCAoaWYgYW5kIHdoZW4geW91IHJlLWNvbm5lY3QgdG8gdGhlIEludGVybmV0LCBob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcgdGhlIHNvZnR3YXJlLiBUaGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uLCBpZiBhbnksIG1heSBhbHNvIHNwZWNpZnkgaG93IHRvIHR1cm4gb2ZmIHVwZGF0ZXMgZm9yIHlvdXIgc3BlY2lmaWMgZGV2aWNlIG9yIHNvZnR3YXJlLgpjKSAgICBHZXJtYW55IGFuZCBBdXN0cmlhLgoKKGkpICAgICAgICBXYXJyYW50eS4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybSBzdWJzdGFudGlhbGx5IGFzIGRlc2NyaWJlZCBpbiBhbnkgTWljcm9zb2Z0IG1hdGVyaWFscyB0aGF0IGFjY29tcGFueSBpdC4gSG93ZXZlciwgTWljcm9zb2Z0IGdpdmVzIG5vIGNvbnRyYWN0dWFsIGd1YXJhbnRlZSBpbiByZWxhdGlvbiB0byB0aGUgc29mdHdhcmUuCgooaWkpICAgICAgIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBjYXNlIG9mIGludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkgQWN0LCBhcyB3ZWxsIGFzIGluIGNhc2Ugb2YgZGVhdGggb3IgcGVyc29uYWwgb3IgcGh5c2ljYWwgaW5qdXJ5LCBNaWNyb3NvZnQgaXMgbGlhYmxlIGFjY29yZGluZyB0byB0aGUgc3RhdHV0b3J5IGxhdy4KU3ViamVjdCB0byB0aGUgZm9yZWdvaW5nIGNsYXVzZSAoaWkpLCBNaWNyb3NvZnQgd2lsbCBvbmx5IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2UgaWYgTWljcm9zb2Z0IGlzIGluIGJyZWFjaCBvZiBzdWNoIG1hdGVyaWFsIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlIHBlcmZvcm1hbmNlIG9mIHRoaXMgYWdyZWVtZW50LCB0aGUgYnJlYWNoIG9mIHdoaWNoIHdvdWxkIGVuZGFuZ2VyIHRoZSBwdXJwb3NlIG9mIHRoaXMgYWdyZWVtZW50IGFuZCB0aGUgY29tcGxpYW5jZSB3aXRoIHdoaWNoIGEgcGFydHkgbWF5IGNvbnN0YW50bHkgdHJ1c3QgaW4gKHNvLWNhbGxlZCAiY2FyZGluYWwgb2JsaWdhdGlvbnMiKS4gSW4gb3RoZXIgY2FzZXMgb2Ygc2xpZ2h0IG5lZ2xpZ2VuY2UsIE1pY3Jvc29mdCB3aWxsIG5vdCBiZSBsaWFibGUgZm9yIHNsaWdodCBuZWdsaWdlbmNlCjExLiBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBUSEUgU09GVFdBUkUgSVMgTElDRU5TRUQg4oCcQVMtSVMu4oCdIFlPVSBCRUFSIFRIRSBSSVNLIE9GIFVTSU5HIElULiBNSUNST1NPRlQgR0lWRVMgTk8gRVhQUkVTUyBXQVJSQU5USUVTLCBHVUFSQU5URUVTIE9SIENPTkRJVElPTlMuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KMTIuIExpbWl0YXRpb24gb24gYW5kIEV4Y2x1c2lvbiBvZiBSZW1lZGllcyBhbmQgRGFtYWdlcy4gWU9VIENBTiBSRUNPVkVSIEZST00gTUlDUk9TT0ZUIEFORCBJVFMgU1VQUExJRVJTIE9OTFkgRElSRUNUIERBTUFHRVMgVVAgVE8gVS5TLiAkNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVCBQUk9GSVRTLCBTUEVDSUFMLCBJTkRJUkVDVCBPUiBJTkNJREVOVEFMIERBTUFHRVMuCgpUaGlzIGxpbWl0YXRpb24gYXBwbGllcyB0byAoYSkgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZiBjb250cmFjdCwgYnJlYWNoIG9mIHdhcnJhbnR5LCBndWFyYW50ZWUgb3IgY29uZGl0aW9uLCBzdHJpY3QgbGlhYmlsaXR5LCBuZWdsaWdlbmNlLCBvciBvdGhlciB0b3J0IHRvIHRoZSBleHRlbnQgcGVybWl0dGVkIGJ5IGFwcGxpY2FibGUgbGF3LgoKSXQgYWxzbyBhcHBsaWVzIGV2ZW4gaWYgTWljcm9zb2Z0IGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gYWJvdXQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZSB5b3VyIHN0YXRlIG9yIGNvdW50cnkgbWF5IG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgaW5jaWRlbnRhbCwgY29uc2VxdWVudGlhbCBvciBvdGhlciBkYW1hZ2VzLgoKIAo=","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.Facebook@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.Facebook/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"published_at","value":"2015-02-20T02:04:43+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.Google@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.Google","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.Google@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.Google/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T02:13:19+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.OpenIdConnect@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.OpenIdConnect","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.OpenIdConnect@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.OpenIdConnect/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"published_at","value":"2015-02-20T05:42:52+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.Twitter@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.Twitter","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.Twitter@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.Twitter/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"published_at","value":"2015-02-20T02:33:40+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Security.WsFederation@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Security.WsFederation","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"CgpNSUNST1NPRlQgU09GVFdBUkUgTElDRU5TRSBURVJNUwoKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQoKVGhlc2UgbGljZW5zZSB0ZXJtcyBhcmUgYW4gYWdyZWVtZW50IGJldHdlZW4geW91IGFuZCBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpLiBUaGV5IGFwcGx5IHRvIHRoZSBzb2Z0d2FyZSBuYW1lZCBhYm92ZS4gVGhlIHRlcm1zIGFsc28gYXBwbHkgdG8gYW55IE1pY3Jvc29mdCBzZXJ2aWNlcyBvciB1cGRhdGVzIGZvciB0aGUgc29mdHdhcmUsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRob3NlIGhhdmUgZGlmZmVyZW50IHRlcm1zLgoKSWYgeW91IGNvbXBseSB3aXRoIHRoZXNlIGxpY2Vuc2UgdGVybXMsIHlvdSBoYXZlIHRoZSByaWdodHMgYmVsb3cuCjEuICAgIElOU1RBTExBVElPTiBBTkQgVVNFIFJJR0hUUy4KCllvdSBtYXkgaW5zdGFsbCBhbmQgdXNlIGFueSBudW1iZXIgb2YgY29waWVzIG9mIHRoZSBzb2Z0d2FyZSB0byBkZXZlbG9wIGFuZCB0ZXN0IHlvdXIgYXBwbGljYXRpb25zLiAKMi4gICAgVEhJUkQgUEFSVFkgQ09NUE9ORU5UUy4gVGhlIHNvZnR3YXJlIG1heSBpbmNsdWRlIHRoaXJkIHBhcnR5IGNvbXBvbmVudHMgd2l0aCBzZXBhcmF0ZSBsZWdhbCBub3RpY2VzIG9yIGdvdmVybmVkIGJ5IG90aGVyIGFncmVlbWVudHMsIGFzIG1heSBiZSBkZXNjcmliZWQgaW4gdGhlIFRoaXJkUGFydHlOb3RpY2VzIGZpbGUocykgYWNjb21wYW55aW5nIHRoZSBzb2Z0d2FyZS4KMy4gICAgQURESVRJT05BTCBMSUNFTlNJTkcgUkVRVUlSRU1FTlRTIEFORC9PUiBVU0UgUklHSFRTLgphLiAgICAgRElTVFJJQlVUQUJMRSBDT0RFLiAgVGhlIHNvZnR3YXJlIGlzIGNvbXByaXNlZCBvZiBEaXN0cmlidXRhYmxlIENvZGUuIOKAnERpc3RyaWJ1dGFibGUgQ29kZeKAnSBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBhcHBsaWNhdGlvbnMgeW91IGRldmVsb3AgaWYgeW91IGNvbXBseSB3aXRoIHRoZSB0ZXJtcyBiZWxvdy4KaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgWW91IG1heSBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBvYmplY3QgY29kZSBmb3JtIG9mIHRoZSBzb2Z0d2FyZS4KCsK3ICAgICAgICBUaGlyZCBQYXJ0eSBEaXN0cmlidXRpb24uIFlvdSBtYXkgcGVybWl0IGRpc3RyaWJ1dG9ycyBvZiB5b3VyIGFwcGxpY2F0aW9ucyB0byBjb3B5IGFuZCBkaXN0cmlidXRlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgYXMgcGFydCBvZiB0aG9zZSBhcHBsaWNhdGlvbnMuCmlpLiAgICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgdXNlIHRoZSBEaXN0cmlidXRhYmxlIENvZGUgaW4geW91ciBhcHBsaWNhdGlvbnMgYW5kIG5vdCBhcyBhIHN0YW5kYWxvbmUgZGlzdHJpYnV0aW9uOwoKwrcgICAgICAgIHJlcXVpcmUgZGlzdHJpYnV0b3JzIGFuZCBleHRlcm5hbCBlbmQgdXNlcnMgdG8gYWdyZWUgdG8gdGVybXMgdGhhdCBwcm90ZWN0IGl0IGF0IGxlYXN0IGFzIG11Y2ggYXMgdGhpcyBhZ3JlZW1lbnQ7IGFuZAoKwrcgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBhcHBsaWNhdGlvbnMsIGV4Y2VwdCB0byB0aGUgZXh0ZW50IHRoYXQgYW55IGNsYWltIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgdW5tb2RpZmllZCBEaXN0cmlidXRhYmxlIENvZGUuCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgIHVzZSBNaWNyb3NvZnTigJlzIHRyYWRlbWFya3MgaW4geW91ciBhcHBsaWNhdGlvbnPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIGFwcGxpY2F0aW9ucyBjb21lIGZyb20gb3IgYXJlIGVuZG9yc2VkIGJ5IE1pY3Jvc29mdDsgb3IKCsK3ICAgICAgICBtb2RpZnkgb3IgZGlzdHJpYnV0ZSB0aGUgc291cmNlIGNvZGUgb2YgYW55IERpc3RyaWJ1dGFibGUgQ29kZSBzbyB0aGF0IGFueSBwYXJ0IG9mIGl0IGJlY29tZXMgc3ViamVjdCB0byBhbiBFeGNsdWRlZCBMaWNlbnNlLiBBbiDigJxFeGNsdWRlZCBMaWNlbnNl4oCdIGlzIG9uZSB0aGF0IHJlcXVpcmVzLCBhcyBhIGNvbmRpdGlvbiBvZiB1c2UsIG1vZGlmaWNhdGlvbiBvciBkaXN0cmlidXRpb24gb2YgY29kZSwgdGhhdCAoaSkgaXQgYmUgZGlzY2xvc2VkIG9yIGRpc3RyaWJ1dGVkIGluIHNvdXJjZSBjb2RlIGZvcm07IG9yIChpaSkgb3RoZXJzIGhhdmUgdGhlIHJpZ2h0IHRvIG1vZGlmeSBpdC4KNC4gICAgREFUQS4KYS4gICAgIERhdGEgQ29sbGVjdGlvbi4gVGhlIHNvZnR3YXJlIG1heSBjb2xsZWN0IGluZm9ybWF0aW9uIGFib3V0IHlvdSBhbmQgeW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlLCBhbmQgc2VuZCB0aGF0IHRvIE1pY3Jvc29mdC4gTWljcm9zb2Z0IG1heSB1c2UgdGhpcyBpbmZvcm1hdGlvbiB0byBwcm92aWRlIHNlcnZpY2VzIGFuZCBpbXByb3ZlIG91ciBwcm9kdWN0cyBhbmQgc2VydmljZXMuICBZb3UgbWF5IG9wdC1vdXQgb2YgbWFueSBvZiB0aGVzZSBzY2VuYXJpb3MsIGJ1dCBub3QgYWxsLCBhcyBkZXNjcmliZWQgaW4gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24uICBUaGVyZSBhcmUgYWxzbyBzb21lIGZlYXR1cmVzIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG1heSBlbmFibGUgeW91IGFuZCBNaWNyb3NvZnQgdG8gY29sbGVjdCBkYXRhIGZyb20gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMuIElmIHlvdSB1c2UgdGhlc2UgZmVhdHVyZXMsIHlvdSBtdXN0IGNvbXBseSB3aXRoIGFwcGxpY2FibGUgbGF3LCBpbmNsdWRpbmcgcHJvdmlkaW5nIGFwcHJvcHJpYXRlIG5vdGljZXMgdG8gdXNlcnMgb2YgeW91ciBhcHBsaWNhdGlvbnMgdG9nZXRoZXIgd2l0aCBNaWNyb3NvZnTigJlzIHByaXZhY3kgc3RhdGVtZW50LiBPdXIgcHJpdmFjeSBzdGF0ZW1lbnQgaXMgbG9jYXRlZCBhdCBodHRwczovL2dvLm1pY3Jvc29mdC5jb20vZndsaW5rLz9MaW5rSUQ9ODI0NzA0LiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgZGF0YSBjb2xsZWN0aW9uIGFuZCBpdHMgdXNlIGZyb20gdGhlIHNvZnR3YXJlIGRvY3VtZW50YXRpb24gYW5kIG91ciBwcml2YWN5IHN0YXRlbWVudC4gWW91ciB1c2Ugb2YgdGhlIHNvZnR3YXJlIG9wZXJhdGVzIGFzIHlvdXIgY29uc2VudCB0byB0aGVzZSBwcmFjdGljZXMuCmIuICAgIFByb2Nlc3Npbmcgb2YgUGVyc29uYWwgRGF0YS4gVG8gdGhlIGV4dGVudCBNaWNyb3NvZnQgaXMgYSBwcm9jZXNzb3Igb3Igc3VicHJvY2Vzc29yIG9mIHBlcnNvbmFsIGRhdGEgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBzb2Z0d2FyZSwgTWljcm9zb2Z0IG1ha2VzIHRoZSBjb21taXRtZW50cyBpbiB0aGUgRXVyb3BlYW4gVW5pb24gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbiBUZXJtcyBvZiB0aGUgT25saW5lIFNlcnZpY2VzIFRlcm1zIHRvIGFsbCBjdXN0b21lcnMgZWZmZWN0aXZlIE1heSAyNSwgMjAxOCwgYXQgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvbGVnYWwvZ2Rwci4KNS4gICAgU2NvcGUgb2YgTGljZW5zZS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgd29yayBhcm91bmQgYW55IHRlY2huaWNhbCBsaW1pdGF0aW9ucyBpbiB0aGUgc29mdHdhcmU7CgrCtyAgICAgICAgcmV2ZXJzZSBlbmdpbmVlciwgZGVjb21waWxlIG9yIGRpc2Fzc2VtYmxlIHRoZSBzb2Z0d2FyZSwgb3Igb3RoZXJ3aXNlIGF0dGVtcHQgdG8gZGVyaXZlIHRoZSBzb3VyY2UgY29kZSBmb3IgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIHRvIHRoZSBleHRlbnQgcmVxdWlyZWQgYnkgdGhpcmQgcGFydHkgbGljZW5zaW5nIHRlcm1zIGdvdmVybmluZyB1c2Ugb2YgY2VydGFpbiBvcGVuIHNvdXJjZSBjb21wb25lbnRzIHRoYXQgbWF5IGJlIGluY2x1ZGVkIGluIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICByZW1vdmUsIG1pbmltaXplLCBibG9jayBvciBtb2RpZnkgYW55IG5vdGljZXMgb2YgTWljcm9zb2Z0IG9yIGl0cyBzdXBwbGllcnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgIHVzZSB0aGUgc29mdHdhcmUgaW4gYW55IHdheSB0aGF0IGlzIGFnYWluc3QgdGhlIGxhdzsgb3IKCsK3ICAgICAgICBzaGFyZSwgcHVibGlzaCwgcmVudCBvciBsZWFzZSB0aGUgc29mdHdhcmUsIHByb3ZpZGUgdGhlIHNvZnR3YXJlIGFzIGEgc3RhbmQtYWxvbmUgb2ZmZXJpbmcgZm9yIG90aGVycyB0byB1c2UsIG9yIHRyYW5zZmVyIHRoZSBzb2Z0d2FyZSBvciB0aGlzIGFncmVlbWVudCB0byBhbnkgdGhpcmQgcGFydHkuCjYuICAgIEV4cG9ydCBSZXN0cmljdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUsIHdoaWNoIGluY2x1ZGUgcmVzdHJpY3Rpb25zIG9uIGRlc3RpbmF0aW9ucywgZW5kIHVzZXJzLCBhbmQgZW5kIHVzZS4gRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gb24gZXhwb3J0IHJlc3RyaWN0aW9ucywgdmlzaXQgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLiAgCjcuICAgIFNVUFBPUlQgU0VSVklDRVMuIEJlY2F1c2UgdGhpcyBzb2Z0d2FyZSBpcyDigJxhcyBpcyzigJ0gd2UgbWF5IG5vdCBwcm92aWRlIHN1cHBvcnQgc2VydmljZXMgZm9yIGl0Lgo4LiAgICBFbnRpcmUgQWdyZWVtZW50LiBUaGlzIGFncmVlbWVudCwgYW5kIHRoZSB0ZXJtcyBmb3Igc3VwcGxlbWVudHMsIHVwZGF0ZXMsIEludGVybmV0LWJhc2VkIHNlcnZpY2VzIGFuZCBzdXBwb3J0IHNlcnZpY2VzIHRoYXQgeW91IHVzZSwgYXJlIHRoZSBlbnRpcmUgYWdyZWVtZW50IGZvciB0aGUgc29mdHdhcmUgYW5kIHN1cHBvcnQgc2VydmljZXMuCjkuICAgIEFwcGxpY2FibGUgTGF3LiAgSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBsYXcgYXBwbGllcyB0byBpbnRlcnByZXRhdGlvbiBvZiBhbmQgY2xhaW1zIGZvciBicmVhY2ggb2YgdGhpcyBhZ3JlZW1lbnQsIGFuZCB0aGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgYXBwbHkgdG8gYWxsIG90aGVyIGNsYWltcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBhbnkgb3RoZXIgY291bnRyeSwgaXRzIGxhd3MgYXBwbHkuCjEwLiBDT05TVU1FUiBSSUdIVFM7IFJFR0lPTkFMIFZBUklBVElPTlMuIFRoaXMgYWdyZWVtZW50IGRlc2NyaWJlcyBjZXJ0YWluIGxlZ2FsIHJpZ2h0cy4gWW91IG1heSBoYXZlIG90aGVyIHJpZ2h0cywgaW5jbHVkaW5nIGNvbnN1bWVyIHJpZ2h0cywgdW5kZXIgdGhlIGxhd3Mgb2YgeW91ciBzdGF0ZSBvciBjb3VudHJ5LiBTZXBhcmF0ZSBhbmQgYXBhcnQgZnJvbSB5b3VyIHJlbGF0aW9uc2hpcCB3aXRoIE1pY3Jvc29mdCwgeW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aGljaCB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlLiBUaGlzIGFncmVlbWVudCBkb2VzIG5vdCBjaGFuZ2UgdGhvc2Ugb3RoZXIgcmlnaHRzIGlmIHRoZSBsYXdzIG9mIHlvdXIgc3RhdGUgb3IgY291bnRyeSBkbyBub3QgcGVybWl0IGl0IHRvIGRvIHNvLiBGb3IgZXhhbXBsZSwgaWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiBvbmUgb2YgdGhlIGJlbG93IHJlZ2lvbnMsIG9yIG1hbmRhdG9yeSBjb3VudHJ5IGxhdyBhcHBsaWVzLCB0aGVuIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBhcHBseSB0byB5b3U6CmEpICAgIEF1c3RyYWxpYS4gWW91IGhhdmUgc3RhdHV0b3J5IGd1YXJhbnRlZXMgdW5kZXIgdGhlIEF1c3RyYWxpYW4gQ29uc3VtZXIgTGF3IGFuZCBub3RoaW5nIGluIHRoaXMgYWdyZWVtZW50IGlzIGludGVuZGVkIHRvIGFmZmVjdCB0aG9zZSByaWdodHMuCmIpICAgIENhbmFkYS4gSWYgeW91IGFjcXVpcmVkIHRoaXMgc29mdHdhcmUgaW4gQ2FuYWRhLCB5b3UgbWF5IHN0b3AgcmVjZWl2aW5nIHVwZGF0ZXMgYnkgdHVybmluZyBvZmYgdGhlIGF1dG9tYXRpYyB1cGRhdGUgZmVhdHVyZSwgZGlzY29ubmVjdGluZyB5b3VyIGRldmljZSBmcm9tIHRoZSBJbnRlcm5ldCAoaWYgYW5kIHdoZW4geW91IHJlLWNvbm5lY3QgdG8gdGhlIEludGVybmV0LCBob3dldmVyLCB0aGUgc29mdHdhcmUgd2lsbCByZXN1bWUgY2hlY2tpbmcgZm9yIGFuZCBpbnN0YWxsaW5nIHVwZGF0ZXMpLCBvciB1bmluc3RhbGxpbmcgdGhlIHNvZnR3YXJlLiBUaGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uLCBpZiBhbnksIG1heSBhbHNvIHNwZWNpZnkgaG93IHRvIHR1cm4gb2ZmIHVwZGF0ZXMgZm9yIHlvdXIgc3BlY2lmaWMgZGV2aWNlIG9yIHNvZnR3YXJlLgpjKSAgICBHZXJtYW55IGFuZCBBdXN0cmlhLgoKKGkpICAgICAgICBXYXJyYW50eS4gVGhlIHNvZnR3YXJlIHdpbGwgcGVyZm9ybSBzdWJzdGFudGlhbGx5IGFzIGRlc2NyaWJlZCBpbiBhbnkgTWljcm9zb2Z0IG1hdGVyaWFscyB0aGF0IGFjY29tcGFueSBpdC4gSG93ZXZlciwgTWljcm9zb2Z0IGdpdmVzIG5vIGNvbnRyYWN0dWFsIGd1YXJhbnRlZSBpbiByZWxhdGlvbiB0byB0aGUgc29mdHdhcmUuCgooaWkpICAgICAgIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LiBJbiBjYXNlIG9mIGludGVudGlvbmFsIGNvbmR1Y3QsIGdyb3NzIG5lZ2xpZ2VuY2UsIGNsYWltcyBiYXNlZCBvbiB0aGUgUHJvZHVjdCBMaWFiaWxpdHkgQWN0LCBhcyB3ZWxsIGFzIGluIGNhc2Ugb2YgZGVhdGggb3IgcGVyc29uYWwgb3IgcGh5c2ljYWwgaW5qdXJ5LCBNaWNyb3NvZnQgaXMgbGlhYmxlIGFjY29yZGluZyB0byB0aGUgc3RhdHV0b3J5IGxhdy4KU3ViamVjdCB0byB0aGUgZm9yZWdvaW5nIGNsYXVzZSAoaWkpLCBNaWNyb3NvZnQgd2lsbCBvbmx5IGJlIGxpYWJsZSBmb3Igc2xpZ2h0IG5lZ2xpZ2VuY2UgaWYgTWljcm9zb2Z0IGlzIGluIGJyZWFjaCBvZiBzdWNoIG1hdGVyaWFsIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLCB0aGUgZnVsZmlsbG1lbnQgb2Ygd2hpY2ggZmFjaWxpdGF0ZSB0aGUgZHVlIHBlcmZvcm1hbmNlIG9mIHRoaXMgYWdyZWVtZW50LCB0aGUgYnJlYWNoIG9mIHdoaWNoIHdvdWxkIGVuZGFuZ2VyIHRoZSBwdXJwb3NlIG9mIHRoaXMgYWdyZWVtZW50IGFuZCB0aGUgY29tcGxpYW5jZSB3aXRoIHdoaWNoIGEgcGFydHkgbWF5IGNvbnN0YW50bHkgdHJ1c3QgaW4gKHNvLWNhbGxlZCAiY2FyZGluYWwgb2JsaWdhdGlvbnMiKS4gSW4gb3RoZXIgY2FzZXMgb2Ygc2xpZ2h0IG5lZ2xpZ2VuY2UsIE1pY3Jvc29mdCB3aWxsIG5vdCBiZSBsaWFibGUgZm9yIHNsaWdodCBuZWdsaWdlbmNlCjExLiBEaXNjbGFpbWVyIG9mIFdhcnJhbnR5LiBUSEUgU09GVFdBUkUgSVMgTElDRU5TRUQg4oCcQVMtSVMu4oCdIFlPVSBCRUFSIFRIRSBSSVNLIE9GIFVTSU5HIElULiBNSUNST1NPRlQgR0lWRVMgTk8gRVhQUkVTUyBXQVJSQU5USUVTLCBHVUFSQU5URUVTIE9SIENPTkRJVElPTlMuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KMTIuIExpbWl0YXRpb24gb24gYW5kIEV4Y2x1c2lvbiBvZiBSZW1lZGllcyBhbmQgRGFtYWdlcy4gWU9VIENBTiBSRUNPVkVSIEZST00gTUlDUk9TT0ZUIEFORCBJVFMgU1VQUExJRVJTIE9OTFkgRElSRUNUIERBTUFHRVMgVVAgVE8gVS5TLiAkNS4wMC4gWU9VIENBTk5PVCBSRUNPVkVSIEFOWSBPVEhFUiBEQU1BR0VTLCBJTkNMVURJTkcgQ09OU0VRVUVOVElBTCwgTE9TVCBQUk9GSVRTLCBTUEVDSUFMLCBJTkRJUkVDVCBPUiBJTkNJREVOVEFMIERBTUFHRVMuCgpUaGlzIGxpbWl0YXRpb24gYXBwbGllcyB0byAoYSkgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9uczsgYW5kIChiKSBjbGFpbXMgZm9yIGJyZWFjaCBvZiBjb250cmFjdCwgYnJlYWNoIG9mIHdhcnJhbnR5LCBndWFyYW50ZWUgb3IgY29uZGl0aW9uLCBzdHJpY3QgbGlhYmlsaXR5LCBuZWdsaWdlbmNlLCBvciBvdGhlciB0b3J0IHRvIHRoZSBleHRlbnQgcGVybWl0dGVkIGJ5IGFwcGxpY2FibGUgbGF3LgoKSXQgYWxzbyBhcHBsaWVzIGV2ZW4gaWYgTWljcm9zb2Z0IGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gYWJvdXQgdGhlIHBvc3NpYmlsaXR5IG9mIHRoZSBkYW1hZ2VzLiBUaGUgYWJvdmUgbGltaXRhdGlvbiBvciBleGNsdXNpb24gbWF5IG5vdCBhcHBseSB0byB5b3UgYmVjYXVzZSB5b3VyIHN0YXRlIG9yIGNvdW50cnkgbWF5IG5vdCBhbGxvdyB0aGUgZXhjbHVzaW9uIG9yIGxpbWl0YXRpb24gb2YgaW5jaWRlbnRhbCwgY29uc2VxdWVudGlhbCBvciBvdGhlciBkYW1hZ2VzLgoKIAo=","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"TUlDUk9TT0ZUIFNPRlRXQVJFIExJQ0VOU0UgVEVSTVMKTUlDUk9TT0ZUIC5ORVQgTElCUkFSWQpUaGVzZSBsaWNlbnNlIHRlcm1zIGFyZSBhbiBhZ3JlZW1lbnQgYmV0d2VlbiBNaWNyb3NvZnQgQ29ycG9yYXRpb24gKG9yIGJhc2VkIG9uIHdoZXJlIHlvdSBsaXZlLCBvbmUgb2YgaXRzIGFmZmlsaWF0ZXMpIGFuZCB5b3UuIFBsZWFzZSByZWFkIHRoZW0uIFRoZXkgYXBwbHkgdG8gdGhlIHNvZnR3YXJlIG5hbWVkIGFib3ZlLCB3aGljaCBpbmNsdWRlcyB0aGUgbWVkaWEgb24gd2hpY2ggeW91IHJlY2VpdmVkIGl0LCBpZiBhbnkuIFRoZSB0ZXJtcyBhbHNvIGFwcGx5IHRvIGFueSBNaWNyb3NvZnQKCsK3ICAgICAgICAgdXBkYXRlcywKCsK3ICAgICAgICAgc3VwcGxlbWVudHMsCgrCtyAgICAgICAgIEludGVybmV0LWJhc2VkIHNlcnZpY2VzLCBhbmQKCsK3ICAgICAgICAgc3VwcG9ydCBzZXJ2aWNlcwoKZm9yIHRoaXMgc29mdHdhcmUsIHVubGVzcyBvdGhlciB0ZXJtcyBhY2NvbXBhbnkgdGhvc2UgaXRlbXMuIElmIHNvLCB0aG9zZSB0ZXJtcyBhcHBseS4KCkJZIFVTSU5HIFRIRSBTT0ZUV0FSRSwgWU9VIEFDQ0VQVCBUSEVTRSBURVJNUy4gSUYgWU9VIERPIE5PVCBBQ0NFUFQgVEhFTSwgRE8gTk9UIFVTRSBUSEUgU09GVFdBUkUuCgpJRiBZT1UgQ09NUExZIFdJVEggVEhFU0UgTElDRU5TRSBURVJNUywgWU9VIEhBVkUgVEhFIFBFUlBFVFVBTCBSSUdIVFMgQkVMT1cuCgoxLiAgICBJTlNUQUxMQVRJT04gQU5EIFVTRSBSSUdIVFMuCgphLiAgICBJbnN0YWxsYXRpb24gYW5kIFVzZS4gWW91IG1heSBpbnN0YWxsIGFuZCB1c2UgYW55IG51bWJlciBvZiBjb3BpZXMgb2YgdGhlIHNvZnR3YXJlIHRvIGRlc2lnbiwgZGV2ZWxvcCBhbmQgdGVzdCB5b3VyIHByb2dyYW1zLgoKYi4gICAgVGhpcmQgUGFydHkgUHJvZ3JhbXMuIFRoZSBzb2Z0d2FyZSBtYXkgaW5jbHVkZSB0aGlyZCBwYXJ0eSBwcm9ncmFtcyB0aGF0IE1pY3Jvc29mdCwgbm90IHRoZSB0aGlyZCBwYXJ0eSwgbGljZW5zZXMgdG8geW91IHVuZGVyIHRoaXMgYWdyZWVtZW50LiBOb3RpY2VzLCBpZiBhbnksIGZvciB0aGUgdGhpcmQgcGFydHkgcHJvZ3JhbSBhcmUgaW5jbHVkZWQgZm9yIHlvdXIgaW5mb3JtYXRpb24gb25seS4KCjIuICAgIEFERElUSU9OQUwgTElDRU5TSU5HIFJFUVVJUkVNRU5UUyBBTkQvT1IgVVNFIFJJR0hUUy4KCmEuICAgIERJU1RSSUJVVEFCTEUgQ09ERS4gIFRoZSBzb2Z0d2FyZSBpcyBjb21wcmlzZWQgb2YgRGlzdHJpYnV0YWJsZSBDb2RlLiAiRGlzdHJpYnV0YWJsZSBDb2RlIiBpcyBjb2RlIHRoYXQgeW91IGFyZSBwZXJtaXR0ZWQgdG8gZGlzdHJpYnV0ZSBpbiBwcm9ncmFtcyB5b3UgZGV2ZWxvcCBpZiB5b3UgY29tcGx5IHdpdGggdGhlIHRlcm1zIGJlbG93LgoKaS4gICAgICBSaWdodCB0byBVc2UgYW5kIERpc3RyaWJ1dGUuCgrCtyAgICAgICAgIFlvdSBtYXkgY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgb2JqZWN0IGNvZGUgZm9ybSBvZiB0aGUgc29mdHdhcmUuCgrCtyAgICAgICAgIFRoaXJkIFBhcnR5IERpc3RyaWJ1dGlvbi4gWW91IG1heSBwZXJtaXQgZGlzdHJpYnV0b3JzIG9mIHlvdXIgcHJvZ3JhbXMgdG8gY29weSBhbmQgZGlzdHJpYnV0ZSB0aGUgRGlzdHJpYnV0YWJsZSBDb2RlIGFzIHBhcnQgb2YgdGhvc2UgcHJvZ3JhbXMuCgppaS4gICAgRGlzdHJpYnV0aW9uIFJlcXVpcmVtZW50cy4gRm9yIGFueSBEaXN0cmlidXRhYmxlIENvZGUgeW91IGRpc3RyaWJ1dGUsIHlvdSBtdXN0CgrCtyAgICAgICAgIGFkZCBzaWduaWZpY2FudCBwcmltYXJ5IGZ1bmN0aW9uYWxpdHkgdG8gaXQgaW4geW91ciBwcm9ncmFtczsKCsK3ICAgICAgICAgcmVxdWlyZSBkaXN0cmlidXRvcnMgYW5kIGV4dGVybmFsIGVuZCB1c2VycyB0byBhZ3JlZSB0byB0ZXJtcyB0aGF0IHByb3RlY3QgaXQgYXQgbGVhc3QgYXMgbXVjaCBhcyB0aGlzIGFncmVlbWVudDsKCsK3ICAgICAgICAgZGlzcGxheSB5b3VyIHZhbGlkIGNvcHlyaWdodCBub3RpY2Ugb24geW91ciBwcm9ncmFtczsgYW5kCgrCtyAgICAgICAgIGluZGVtbmlmeSwgZGVmZW5kLCBhbmQgaG9sZCBoYXJtbGVzcyBNaWNyb3NvZnQgZnJvbSBhbnkgY2xhaW1zLCBpbmNsdWRpbmcgYXR0b3JuZXlz4oCZIGZlZXMsIHJlbGF0ZWQgdG8gdGhlIGRpc3RyaWJ1dGlvbiBvciB1c2Ugb2YgeW91ciBwcm9ncmFtcy4KCmlpaS4gICBEaXN0cmlidXRpb24gUmVzdHJpY3Rpb25zLiBZb3UgbWF5IG5vdAoKwrcgICAgICAgICBhbHRlciBhbnkgY29weXJpZ2h0LCB0cmFkZW1hcmsgb3IgcGF0ZW50IG5vdGljZSBpbiB0aGUgRGlzdHJpYnV0YWJsZSBDb2RlOwoKwrcgICAgICAgICB1c2UgTWljcm9zb2Z04oCZcyB0cmFkZW1hcmtzIGluIHlvdXIgcHJvZ3JhbXPigJkgbmFtZXMgb3IgaW4gYSB3YXkgdGhhdCBzdWdnZXN0cyB5b3VyIHByb2dyYW1zIGNvbWUgZnJvbSBvciBhcmUgZW5kb3JzZWQgYnkgTWljcm9zb2Z0OwoKwrcgICAgICAgICBpbmNsdWRlIERpc3RyaWJ1dGFibGUgQ29kZSBpbiBtYWxpY2lvdXMsIGRlY2VwdGl2ZSBvciB1bmxhd2Z1bCBwcm9ncmFtczsgb3IKCsK3ICAgICAgICAgbW9kaWZ5IG9yIGRpc3RyaWJ1dGUgdGhlIHNvdXJjZSBjb2RlIG9mIGFueSBEaXN0cmlidXRhYmxlIENvZGUgc28gdGhhdCBhbnkgcGFydCBvZiBpdCBiZWNvbWVzIHN1YmplY3QgdG8gYW4gRXhjbHVkZWQgTGljZW5zZS4gQW4gRXhjbHVkZWQgTGljZW5zZSBpcyBvbmUgdGhhdCByZXF1aXJlcywgYXMgYSBjb25kaXRpb24gb2YgdXNlLCBtb2RpZmljYXRpb24gb3IgZGlzdHJpYnV0aW9uLCB0aGF0CgrCtyAgICAgICAgIHRoZSBjb2RlIGJlIGRpc2Nsb3NlZCBvciBkaXN0cmlidXRlZCBpbiBzb3VyY2UgY29kZSBmb3JtOyBvcgoKwrcgICAgICAgICBvdGhlcnMgaGF2ZSB0aGUgcmlnaHQgdG8gbW9kaWZ5IGl0LgoKMy4gICAgU0NPUEUgT0YgTElDRU5TRS4gVGhlIHNvZnR3YXJlIGlzIGxpY2Vuc2VkLCBub3Qgc29sZC4gVGhpcyBhZ3JlZW1lbnQgb25seSBnaXZlcyB5b3Ugc29tZSByaWdodHMgdG8gdXNlIHRoZSBzb2Z0d2FyZS4gTWljcm9zb2Z0IHJlc2VydmVzIGFsbCBvdGhlciByaWdodHMuIFVubGVzcyBhcHBsaWNhYmxlIGxhdyBnaXZlcyB5b3UgbW9yZSByaWdodHMgZGVzcGl0ZSB0aGlzIGxpbWl0YXRpb24sIHlvdSBtYXkgdXNlIHRoZSBzb2Z0d2FyZSBvbmx5IGFzIGV4cHJlc3NseSBwZXJtaXR0ZWQgaW4gdGhpcyBhZ3JlZW1lbnQuIEluIGRvaW5nIHNvLCB5b3UgbXVzdCBjb21wbHkgd2l0aCBhbnkgdGVjaG5pY2FsIGxpbWl0YXRpb25zIGluIHRoZSBzb2Z0d2FyZSB0aGF0IG9ubHkgYWxsb3cgeW91IHRvIHVzZSBpdCBpbiBjZXJ0YWluIHdheXMuIFlvdSBtYXkgbm90CgrCtyAgICAgICAgIHdvcmsgYXJvdW5kIGFueSB0ZWNobmljYWwgbGltaXRhdGlvbnMgaW4gdGhlIHNvZnR3YXJlOwoKwrcgICAgICAgICByZXZlcnNlIGVuZ2luZWVyLCBkZWNvbXBpbGUgb3IgZGlzYXNzZW1ibGUgdGhlIHNvZnR3YXJlLCBleGNlcHQgYW5kIG9ubHkgdG8gdGhlIGV4dGVudCB0aGF0IGFwcGxpY2FibGUgbGF3IGV4cHJlc3NseSBwZXJtaXRzLCBkZXNwaXRlIHRoaXMgbGltaXRhdGlvbjsKCsK3ICAgICAgICAgcHVibGlzaCB0aGUgc29mdHdhcmUgZm9yIG90aGVycyB0byBjb3B5OwoKwrcgICAgICAgICByZW50LCBsZWFzZSBvciBsZW5kIHRoZSBzb2Z0d2FyZTsKCsK3ICAgICAgICAgdHJhbnNmZXIgdGhlIHNvZnR3YXJlIG9yIHRoaXMgYWdyZWVtZW50IHRvIGFueSB0aGlyZCBwYXJ0eTsgb3IKCsK3ICAgICAgICAgdXNlIHRoZSBzb2Z0d2FyZSBmb3IgY29tbWVyY2lhbCBzb2Z0d2FyZSBob3N0aW5nIHNlcnZpY2VzLgoKNC4gICAgQkFDS1VQIENPUFkuIFlvdSBtYXkgbWFrZSBvbmUgYmFja3VwIGNvcHkgb2YgdGhlIHNvZnR3YXJlLiBZb3UgbWF5IHVzZSBpdCBvbmx5IHRvIHJlaW5zdGFsbCB0aGUgc29mdHdhcmUuCgo1LiAgICBET0NVTUVOVEFUSU9OLiBBbnkgcGVyc29uIHRoYXQgaGFzIHZhbGlkIGFjY2VzcyB0byB5b3VyIGNvbXB1dGVyIG9yIGludGVybmFsIG5ldHdvcmsgbWF5IGNvcHkgYW5kIHVzZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgeW91ciBpbnRlcm5hbCwgcmVmZXJlbmNlIHB1cnBvc2VzLgoKNi4gICAgRVhQT1JUIFJFU1RSSUNUSU9OUy4gVGhlIHNvZnR3YXJlIGlzIHN1YmplY3QgdG8gVW5pdGVkIFN0YXRlcyBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMuIFlvdSBtdXN0IGNvbXBseSB3aXRoIGFsbCBkb21lc3RpYyBhbmQgaW50ZXJuYXRpb25hbCBleHBvcnQgbGF3cyBhbmQgcmVndWxhdGlvbnMgdGhhdCBhcHBseSB0byB0aGUgc29mdHdhcmUuIFRoZXNlIGxhd3MgaW5jbHVkZSByZXN0cmljdGlvbnMgb24gZGVzdGluYXRpb25zLCBlbmQgdXNlcnMgYW5kIGVuZCB1c2UuIEZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLCBzZWUgd3d3Lm1pY3Jvc29mdC5jb20vZXhwb3J0aW5nLgoKNy4gICAgU1VQUE9SVCBTRVJWSUNFUy4gQmVjYXVzZSB0aGlzIHNvZnR3YXJlIGlzICJhcyBpcywiIHdlIG1heSBub3QgcHJvdmlkZSBzdXBwb3J0IHNlcnZpY2VzIGZvciBpdC4KCjguICAgIEVOVElSRSBBR1JFRU1FTlQuIFRoaXMgYWdyZWVtZW50LCBhbmQgdGhlIHRlcm1zIGZvciBzdXBwbGVtZW50cywgdXBkYXRlcywgSW50ZXJuZXQtYmFzZWQgc2VydmljZXMgYW5kIHN1cHBvcnQgc2VydmljZXMgdGhhdCB5b3UgdXNlLCBhcmUgdGhlIGVudGlyZSBhZ3JlZW1lbnQgZm9yIHRoZSBzb2Z0d2FyZSBhbmQgc3VwcG9ydCBzZXJ2aWNlcy4KCjkuICAgIEFQUExJQ0FCTEUgTEFXLgoKYS4gICAgVW5pdGVkIFN0YXRlcy4gSWYgeW91IGFjcXVpcmVkIHRoZSBzb2Z0d2FyZSBpbiB0aGUgVW5pdGVkIFN0YXRlcywgV2FzaGluZ3RvbiBzdGF0ZSBsYXcgZ292ZXJucyB0aGUgaW50ZXJwcmV0YXRpb24gb2YgdGhpcyBhZ3JlZW1lbnQgYW5kIGFwcGxpZXMgdG8gY2xhaW1zIGZvciBicmVhY2ggb2YgaXQsIHJlZ2FyZGxlc3Mgb2YgY29uZmxpY3Qgb2YgbGF3cyBwcmluY2lwbGVzLiBUaGUgbGF3cyBvZiB0aGUgc3RhdGUgd2hlcmUgeW91IGxpdmUgZ292ZXJuIGFsbCBvdGhlciBjbGFpbXMsIGluY2x1ZGluZyBjbGFpbXMgdW5kZXIgc3RhdGUgY29uc3VtZXIgcHJvdGVjdGlvbiBsYXdzLCB1bmZhaXIgY29tcGV0aXRpb24gbGF3cywgYW5kIGluIHRvcnQuCgpiLiAgICBPdXRzaWRlIHRoZSBVbml0ZWQgU3RhdGVzLiBJZiB5b3UgYWNxdWlyZWQgdGhlIHNvZnR3YXJlIGluIGFueSBvdGhlciBjb3VudHJ5LCB0aGUgbGF3cyBvZiB0aGF0IGNvdW50cnkgYXBwbHkuCgoxMC4gIExFR0FMIEVGRkVDVC4gVGhpcyBhZ3JlZW1lbnQgZGVzY3JpYmVzIGNlcnRhaW4gbGVnYWwgcmlnaHRzLiBZb3UgbWF5IGhhdmUgb3RoZXIgcmlnaHRzIHVuZGVyIHRoZSBsYXdzIG9mIHlvdXIgY291bnRyeS4gWW91IG1heSBhbHNvIGhhdmUgcmlnaHRzIHdpdGggcmVzcGVjdCB0byB0aGUgcGFydHkgZnJvbSB3aG9tIHlvdSBhY3F1aXJlZCB0aGUgc29mdHdhcmUuIFRoaXMgYWdyZWVtZW50IGRvZXMgbm90IGNoYW5nZSB5b3VyIHJpZ2h0cyB1bmRlciB0aGUgbGF3cyBvZiB5b3VyIGNvdW50cnkgaWYgdGhlIGxhd3Mgb2YgeW91ciBjb3VudHJ5IGRvIG5vdCBwZXJtaXQgaXQgdG8gZG8gc28uCgoxMS4gIERJU0NMQUlNRVIgT0YgV0FSUkFOVFkuIFRIRSBTT0ZUV0FSRSBJUyBMSUNFTlNFRCAiQVMtSVMuIiBZT1UgQkVBUiBUSEUgUklTSyBPRiBVU0lORyBJVC4gTUlDUk9TT0ZUIEdJVkVTIE5PIEVYUFJFU1MgV0FSUkFOVElFUywgR1VBUkFOVEVFUyBPUiBDT05ESVRJT05TLiBZT1UgTUFZIEhBVkUgQURESVRJT05BTCBDT05TVU1FUiBSSUdIVFMgT1IgU1RBVFVUT1JZIEdVQVJBTlRFRVMgVU5ERVIgWU9VUiBMT0NBTCBMQVdTIFdISUNIIFRISVMgQUdSRUVNRU5UIENBTk5PVCBDSEFOR0UuIFRPIFRIRSBFWFRFTlQgUEVSTUlUVEVEIFVOREVSIFlPVVIgTE9DQUwgTEFXUywgTUlDUk9TT0ZUIEVYQ0xVREVTIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OLUlORlJJTkdFTUVOVC4KCkZPUiBBVVNUUkFMSUEg4oCTIFlPVSBIQVZFIFNUQVRVVE9SWSBHVUFSQU5URUVTIFVOREVSIFRIRSBBVVNUUkFMSUFOIENPTlNVTUVSIExBVyBBTkQgTk9USElORyBJTiBUSEVTRSBURVJNUyBJUyBJTlRFTkRFRCBUTyBBRkZFQ1QgVEhPU0UgUklHSFRTLgoKMTIuICBMSU1JVEFUSU9OIE9OIEFORCBFWENMVVNJT04gT0YgUkVNRURJRVMgQU5EIERBTUFHRVMuIFlPVSBDQU4gUkVDT1ZFUiBGUk9NIE1JQ1JPU09GVCBBTkQgSVRTIFNVUFBMSUVSUyBPTkxZIERJUkVDVCBEQU1BR0VTIFVQIFRPIFUuUy4gJDUuMDAuIFlPVSBDQU5OT1QgUkVDT1ZFUiBBTlkgT1RIRVIgREFNQUdFUywgSU5DTFVESU5HIENPTlNFUVVFTlRJQUwsIExPU1QgUFJPRklUUywgU1BFQ0lBTCwgSU5ESVJFQ1QgT1IgSU5DSURFTlRBTCBEQU1BR0VTLgoKVGhpcyBsaW1pdGF0aW9uIGFwcGxpZXMgdG8KCsK3ICAgICAgICAgYW55dGhpbmcgcmVsYXRlZCB0byB0aGUgc29mdHdhcmUsIHNlcnZpY2VzLCBjb250ZW50IChpbmNsdWRpbmcgY29kZSkgb24gdGhpcmQgcGFydHkgSW50ZXJuZXQgc2l0ZXMsIG9yIHRoaXJkIHBhcnR5IHByb2dyYW1zOyBhbmQKCsK3ICAgICAgICAgY2xhaW1zIGZvciBicmVhY2ggb2YgY29udHJhY3QsIGJyZWFjaCBvZiB3YXJyYW50eSwgZ3VhcmFudGVlIG9yIGNvbmRpdGlvbiwgc3RyaWN0IGxpYWJpbGl0eSwgbmVnbGlnZW5jZSwgb3Igb3RoZXIgdG9ydCB0byB0aGUgZXh0ZW50IHBlcm1pdHRlZCBieSBhcHBsaWNhYmxlIGxhdy4KCkl0IGFsc28gYXBwbGllcyBldmVuIGlmIE1pY3Jvc29mdCBrbmV3IG9yIHNob3VsZCBoYXZlIGtub3duIGFib3V0IHRoZSBwb3NzaWJpbGl0eSBvZiB0aGUgZGFtYWdlcy4gVGhlIGFib3ZlIGxpbWl0YXRpb24gb3IgZXhjbHVzaW9uIG1heSBub3QgYXBwbHkgdG8geW91IGJlY2F1c2UgeW91ciBjb3VudHJ5IG1heSBub3QgYWxsb3cgdGhlIGV4Y2x1c2lvbiBvciBsaW1pdGF0aW9uIG9mIGluY2lkZW50YWwsIGNvbnNlcXVlbnRpYWwgb3Igb3RoZXIgZGFtYWdlcy4KClBsZWFzZSBub3RlOiBBcyB0aGlzIHNvZnR3YXJlIGlzIGRpc3RyaWJ1dGVkIGluIFF1ZWJlYywgQ2FuYWRhLCBzb21lIG9mIHRoZSBjbGF1c2VzIGluIHRoaXMgYWdyZWVtZW50IGFyZSBwcm92aWRlZCBiZWxvdyBpbiBGcmVuY2guCgpSZW1hcnF1ZSA6IENlIGxvZ2ljaWVsIMOpdGFudCBkaXN0cmlidcOpIGF1IFF1w6liZWMsIENhbmFkYSwgY2VydGFpbmVzIGRlcyBjbGF1c2VzIGRhbnMgY2UgY29udHJhdCBzb250IGZvdXJuaWVzIGNpLWRlc3NvdXMgZW4gZnJhbsOnYWlzLgoKRVhPTsOJUkFUSU9OIERFIEdBUkFOVElFLiBMZSBsb2dpY2llbCB2aXPDqSBwYXIgdW5lIGxpY2VuY2UgZXN0IG9mZmVydCDCqyB0ZWwgcXVlbCDCuy4gVG91dGUgdXRpbGlzYXRpb24gZGUgY2UgbG9naWNpZWwgZXN0IMOgIHZvdHJlIHNldWxlIHJpc3F1ZSBldCBww6lyaWwuIE1pY3Jvc29mdCBu4oCZYWNjb3JkZSBhdWN1bmUgYXV0cmUgZ2FyYW50aWUgZXhwcmVzc2UuIFZvdXMgcG91dmV6IGLDqW7DqWZpY2llciBkZSBkcm9pdHMgYWRkaXRpb25uZWxzIGVuIHZlcnR1IGR1IGRyb2l0IGxvY2FsIHN1ciBsYSBwcm90ZWN0aW9uIGRlcyBjb25zb21tYXRldXJzLCBxdWUgY2UgY29udHJhdCBuZSBwZXV0IG1vZGlmaWVyLiBMYSBvdSBlbGxlcyBzb250IHBlcm1pc2VzIHBhciBsZSBkcm9pdCBsb2NhbGUsIGxlcyBnYXJhbnRpZXMgaW1wbGljaXRlcyBkZSBxdWFsaXTDqSBtYXJjaGFuZGUsIGTigJlhZMOpcXVhdGlvbiDDoCB1biB1c2FnZSBwYXJ0aWN1bGllciBldCBk4oCZYWJzZW5jZSBkZSBjb250cmVmYcOnb24gc29udCBleGNsdWVzLgoKTElNSVRBVElPTiBERVMgRE9NTUFHRVMtSU5Uw4lSw4pUUyBFVCBFWENMVVNJT04gREUgUkVTUE9OU0FCSUxJVMOJIFBPVVIgTEVTIERPTU1BR0VTLiBWb3VzIHBvdXZleiBvYnRlbmlyIGRlIE1pY3Jvc29mdCBldCBkZSBzZXMgZm91cm5pc3NldXJzIHVuZSBpbmRlbW5pc2F0aW9uIGVuIGNhcyBkZSBkb21tYWdlcyBkaXJlY3RzIHVuaXF1ZW1lbnQgw6AgaGF1dGV1ciBkZSA1LDAwICQgVVMuIFZvdXMgbmUgcG91dmV6IHByw6l0ZW5kcmUgw6AgYXVjdW5lIGluZGVtbmlzYXRpb24gcG91ciBsZXMgYXV0cmVzIGRvbW1hZ2VzLCB5IGNvbXByaXMgbGVzIGRvbW1hZ2VzIHNww6ljaWF1eCwgaW5kaXJlY3RzIG91IGFjY2Vzc29pcmVzIGV0IHBlcnRlcyBkZSBiw6luw6lmaWNlcy4KCkNldHRlIGxpbWl0YXRpb24gY29uY2VybmUgOgoKwrcgICAgICAgICB0b3V0IGNlIHF1aSBlc3QgcmVsacOpIGF1IGxvZ2ljaWVsLCBhdXggc2VydmljZXMgb3UgYXUgY29udGVudSAoeSBjb21wcmlzIGxlIGNvZGUpIGZpZ3VyYW50IHN1ciBkZXMgc2l0ZXMgSW50ZXJuZXQgdGllcnMgb3UgZGFucyBkZXMgcHJvZ3JhbW1lcyB0aWVycyA7IGV0CsK3ICAgICAgICAgbGVzIHLDqWNsYW1hdGlvbnMgYXUgdGl0cmUgZGUgdmlvbGF0aW9uIGRlIGNvbnRyYXQgb3UgZGUgZ2FyYW50aWUsIG91IGF1IHRpdHJlIGRlIHJlc3BvbnNhYmlsaXTDqSBzdHJpY3RlLCBkZSBuw6lnbGlnZW5jZSBvdSBk4oCZdW5lIGF1dHJlIGZhdXRlIGRhbnMgbGEgbGltaXRlIGF1dG9yaXPDqWUgcGFyIGxhIGxvaSBlbiB2aWd1ZXVyLgoKRWxsZSBz4oCZYXBwbGlxdWUgw6lnYWxlbWVudCwgbcOqbWUgc2kgTWljcm9zb2Z0IGNvbm5haXNzYWl0IG91IGRldnJhaXQgY29ubmHDrnRyZSBs4oCZw6l2ZW50dWFsaXTDqSBk4oCZdW4gdGVsIGRvbW1hZ2UuIFNpIHZvdHJlIHBheXMgbuKAmWF1dG9yaXNlIHBhcyBs4oCZZXhjbHVzaW9uIG91IGxhIGxpbWl0YXRpb24gZGUgcmVzcG9uc2FiaWxpdMOpIHBvdXIgbGVzIGRvbW1hZ2VzIGluZGlyZWN0cywgYWNjZXNzb2lyZXMgb3UgZGUgcXVlbHF1ZSBuYXR1cmUgcXVlIGNlIHNvaXQsIGlsIHNlIHBldXQgcXVlIGxhIGxpbWl0YXRpb24gb3UgbOKAmWV4Y2x1c2lvbiBjaS1kZXNzdXMgbmUgc+KAmWFwcGxpcXVlcmEgcGFzIMOgIHZvdHJlIMOpZ2FyZC4KCkVGRkVUIEpVUklESVFVRS4gTGUgcHLDqXNlbnQgY29udHJhdCBkw6ljcml0IGNlcnRhaW5zIGRyb2l0cyBqdXJpZGlxdWVzLiBWb3VzIHBvdXJyaWV6IGF2b2lyIGTigJlhdXRyZXMgZHJvaXRzIHByw6l2dXMgcGFyIGxlcyBsb2lzIGRlIHZvdHJlIHBheXMuIExlIHByw6lzZW50IGNvbnRyYXQgbmUgbW9kaWZpZSBwYXMgbGVzIGRyb2l0cyBxdWUgdm91cyBjb25mw6hyZW50IGxlcyBsb2lzIGRlIHZvdHJlIHBheXMgc2kgY2VsbGVzLWNpIG5lIGxlIHBlcm1ldHRlbnQgcGFzLg==","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Security.WsFederation@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Security.WsFederation/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"published_at","value":"2015-02-20T05:43:25+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.SelfHost@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.SelfHost","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.SelfHost@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.SelfHost/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"published_at","value":"2015-02-20T02:41:38+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.StaticFiles@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.StaticFiles","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.StaticFiles@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.StaticFiles/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"published_at","value":"2015-02-20T02:42:05+00:00"}]},{"bom-ref":"pkg:nuget/Microsoft.Owin.Testing@3.0.1","type":"library","author":"Microsoft","group":"Microsoft.Owin.Testing","name":"","version":"3.0.1","scope":"required","licenses":[{"license":{"name":"Microsoft .NET Library License 2019-06","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.microsoft.com/en-us/web/webpi/eula/net_library_eula_ENU.htm"}},{"license":{"name":"Microsoft .NET Library License","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm"}}],"purl":"pkg:nuget/Microsoft.Owin.Testing@3.0.1","externalReferences":[{"url":"http://katanaproject.codeplex.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Microsoft.Owin.Testing/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-02-20T02:43:12+00:00"}]},{"bom-ref":"pkg:nuget/Moq@4.5.10","type":"library","author":"Daniel Cazzulino, kzu","group":"Moq","name":"","version":"4.5.10","scope":"required","licenses":[{"license":{"id":"BSD-2-Clause","text":{"content":"Q29weXJpZ2h0IChjKSA8eWVhcj4gPG93bmVyPiAKClJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKCjEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCjIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/BSD-2-Clause"}}],"purl":"pkg:nuget/Moq@4.5.10","externalReferences":[{"url":"http://www.moqthis.com/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Moq/4.5.10","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2016-06-21T15:21:49+00:00"}]},{"bom-ref":"pkg:nuget/Newtonsoft.Json@9.0.1","type":"library","author":"James Newton-King","group":"Newtonsoft.Json","name":"","version":"9.0.1","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/Newtonsoft.Json@9.0.1","externalReferences":[{"url":"http://www.newtonsoft.com/json","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Newtonsoft.Json/9.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2016-06-22T08:11:45+00:00"}]},{"bom-ref":"pkg:nuget/Owin@1.0","type":"library","group":"Owin","name":"","version":"1.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/Owin@1.0","properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"location","value":"source/IdentityServer3.nuspec"},{"name":"location","value":"source/Tests/UnitTests/packages.config"}]},{"bom-ref":"pkg:nuget/OwinHttpMessageHandler@1.3.5","type":"library","author":"Damian Hickey","group":"OwinHttpMessageHandler","name":"","version":"1.3.5","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/OwinHttpMessageHandler@1.3.5","externalReferences":[{"url":"https://github.com/damianh/OwinHttpMessageHandler","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/OwinHttpMessageHandler/1.3.5","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"1970-01-01T00:00:00+00:00"}]},{"bom-ref":"pkg:nuget/Serilog@2.0.0","type":"library","author":"Serilog Contributors","group":"Serilog","name":"","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/Serilog@2.0.0","externalReferences":[{"url":"http://serilog.net/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Serilog/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"published_at","value":"2016-06-27T22:29:05+00:00"}]},{"bom-ref":"pkg:nuget/Serilog.Sinks.Literate@2.0.0","type":"library","author":"Serilog Contributors","group":"Serilog.Sinks.Literate","name":"","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/Serilog.Sinks.Literate@2.0.0","externalReferences":[{"url":"https://github.com/serilog/serilog-sinks-seq","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Serilog.Sinks.Literate/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Console/packages.config"},{"name":"published_at","value":"2016-06-27T23:08:40+00:00"}]},{"bom-ref":"pkg:nuget/Serilog.Sinks.Trace@2.0.0","type":"library","author":"Serilog Contributors","group":"Serilog.Sinks.Trace","name":"","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:nuget/Serilog.Sinks.Trace@2.0.0","externalReferences":[{"url":"http://serilog.net/","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/Serilog.Sinks.Trace/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Host.Web/packages.config"},{"name":"published_at","value":"2016-07-05T05:15:23+00:00"}]},{"bom-ref":"pkg:nuget/System.IdentityModel.Tokens.Jwt@4.0.2.206221351","type":"library","author":"Microsoft Corporation","group":"System.IdentityModel.Tokens.Jwt","name":"","version":"4.0.2.206221351","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/System.IdentityModel.Tokens.Jwt@4.0.2.206221351","externalReferences":[{"url":"http://go.microsoft.com/fwlink/?LinkId=272508","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/4.0.2.206221351","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Core/packages.config"},{"name":"location","value":"source/Host.Configuration/packages.config"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-06-23T00:22:28+00:00"}]},{"bom-ref":"pkg:nuget/psake@4.4.1","type":"library","author":"James Kovacs","group":"psake","name":"","version":"4.4.1","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/psake@4.4.1","externalReferences":[{"url":"https://github.com/psake/psake","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/psake/4.4.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/.nuget/packages.config"},{"name":"published_at","value":"2014-11-19T21:44:10+00:00"}]},{"bom-ref":"pkg:nuget/xunit@2.1.0","type":"library","author":"James Newkirk,Brad Wilson","group":"xunit","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:29:32+00:00"}]},{"bom-ref":"pkg:nuget/xunit.abstractions@2.0.0","type":"library","author":"James Newkirk, Brad Wilson","group":"xunit.abstractions","name":"","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.abstractions@2.0.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.abstractions/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-03-16T21:10:45+00:00"}]},{"bom-ref":"pkg:nuget/xunit.assert@2.1.0","type":"library","author":"James Newkirk,Brad Wilson","group":"xunit.assert","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.assert@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.assert/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:30:09+00:00"}]},{"bom-ref":"pkg:nuget/xunit.core@2.1.0","type":"library","author":"James Newkirk,Brad Wilson","group":"xunit.core","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.core@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.core/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:31:22+00:00"}]},{"bom-ref":"pkg:nuget/xunit.extensibility.core@2.1.0","type":"library","author":"James Newkirk,Brad Wilson","group":"xunit.extensibility.core","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.extensibility.core@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.extensibility.core/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:32:00+00:00"}]},{"bom-ref":"pkg:nuget/xunit.extensibility.execution@2.1.0","type":"library","author":"James Newkirk,Brad Wilson","group":"xunit.extensibility.execution","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.extensibility.execution@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.extensibility.execution/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:32:37+00:00"}]},{"bom-ref":"pkg:nuget/xunit.runner.console@2.0.0","type":"library","author":"James Newkirk, Brad Wilson","group":"xunit.runner.console","name":"","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.runner.console@2.0.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.runner.console/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/.nuget/packages.config"},{"name":"published_at","value":"2015-03-16T21:15:01+00:00"}]},{"bom-ref":"pkg:nuget/xunit.runner.visualstudio@2.1.0","type":"library","author":"James Newkirk, Brad Wilson","group":"xunit.runner.visualstudio","name":"","version":"2.1.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:nuget/xunit.runner.visualstudio@2.1.0","externalReferences":[{"url":"https://github.com/xunit/xunit","comment":"Homepage","type":"website"},{"url":"https://www.nuget.org/packages/xunit.runner.visualstudio/2.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"C#"},{"name":"relation","value":"direct"},{"name":"env","value":"runtime"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"source/Tests/UnitTests/packages.config"},{"name":"published_at","value":"2015-09-27T18:35:43+00:00"}]}],"vulnerabilities":[{"bom-ref":"e5bbbce3-fdec-47f7-8b89-484b4145edaa","id":"GHSA-5crp-9r3c-p9vr","references":[{"id":"GHSA-5crp-9r3c-p9vr","source":{"name":"GitHub Advisories","url":"https://github.com/advisories/GHSA-5crp-9r3c-p9vr"}}],"ratings":[{"score":7.5,"severity":"high","method":"CVSSv3","vector":"AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},{"score":0,"severity":"none","method":"CVSSv2"}],"cwes":[755],"description":"Improper Handling of Exceptional Conditions in Newtonsoft.Json","detail":"Newtonsoft.Json prior to version 13.0.1 is vulnerable to Insecure Defaults due to improper handling of expressions with high nesting level that lead to StackOverFlow exception or high CPU and RAM usage. Exploiting this vulnerability results in Denial Of Service (DoS). \n\nThe serialization and deserialization path have different properties regarding the issue.\n\nDeserializing methods (like `JsonConvert.DeserializeObject`) will process the input that results in burning the CPU, allocating memory, and consuming a thread of execution. Quite high nesting level (>10kk, or 9.5MB of `{a:{a:{...` input) is needed to achieve the latency over 10 seconds, depending on the hardware.\n\nSerializing methods (like `JsonConvert.Serialize` or `JObject.ToString`) will throw StackOverFlow exception with the nesting level of around 20k.\n\nTo mitigate the issue one either need to update Newtonsoft.Json to 13.0.1 or set `MaxDepth` parameter in the `JsonSerializerSettings`. This can be done globally with the following statement. After that the parsing of the nested input will fail fast with `Newtonsoft.Json.JsonReaderException`:\n\n``` \nJsonConvert.DefaultSettings = () => new JsonSerializerSettings { MaxDepth = 128 };\n```\n\nRepro code:\n```\n//Create a string representation of an highly nested object (JSON serialized)\nint nRep = 25000;\nstring json = string.Concat(Enumerable.Repeat(\"{a:\", nRep)) + \"1\" +\n string.Concat(Enumerable.Repeat(\"}\", nRep));\n\n//Parse this object (leads to high CPU/RAM consumption)\nvar parsedJson = JsonConvert.DeserializeObject(json);\n\n// Methods below all throw stack overflow with nRep around 20k and higher\n// string a = parsedJson.ToString();\n// string b = JsonConvert.SerializeObject(parsedJson);\n```\n\n**Note the original statement about the problem only affecting IIS applications is misleading.** Any application is affected, however the IIS has a behavior that stops restarting the instance after some time resulting in a harder-to-fix DoS.","published":"2022-06-22T15:08:47","updated":"2022-06-27T18:37:24","affects":[{"ref":"pkg:nuget/Newtonsoft.Json@9.0.1"}]}]}
