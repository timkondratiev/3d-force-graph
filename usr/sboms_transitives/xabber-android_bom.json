{"bomFormat":"CycloneDX","specVersion":"1.4","serialNumber":"urn:uuid:549f34ae-6acf-468e-bc22-9b3f8d93834f","version":1,"metadata":{"timestamp":"2022-07-25T11:42:56.805341+00:00","tools":[{"vendor":"Profiscope","name":"Codescoring (https://codescoring.com)"}]},"components":[{"bom-ref":"pkg:maven/browser/androidx.browser@1.0.0","type":"library","author":"The Android Open Source Project","group":"browser","name":"androidx.browser","version":"1.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/browser/androidx.browser@1.0.0","externalReferences":[{"url":"http://developer.android.com/tools/extras/support-library.html","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/androidx.browser/browser/1.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/legacy-support-v13/androidx.legacy@1.0.0","type":"library","author":"The Android Open Source Project","group":"legacy-support-v13","name":"androidx.legacy","version":"1.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/legacy-support-v13/androidx.legacy@1.0.0","externalReferences":[{"url":"http://developer.android.com/tools/extras/support-library.html","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/androidx.legacy/legacy-support-v13/1.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"location","value":"xabber/emojicon/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/multidex/androidx.multidex@2.0.0","type":"library","author":"The Android Open Source Project","group":"multidex","name":"androidx.multidex","version":"2.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/multidex/androidx.multidex@2.0.0","externalReferences":[{"url":"https://mvnrepository.com/artifact/androidx.multidex/multidex/2.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/com.amulyakhare.textdrawable/com.amulyakhare@1.0.1","type":"library","group":"com.amulyakhare.textdrawable","name":"com.amulyakhare","version":"1.0.1","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/com.amulyakhare.textdrawable/com.amulyakhare@1.0.1","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/gradle/com.android.tools.build@3.4.2","type":"library","author":"The Android Open Source Project","group":"gradle","name":"com.android.tools.build","version":"3.4.2","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/gradle/com.android.tools.build@3.4.2","externalReferences":[{"url":"https://developer.android.com/studio","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.android.tools.build/gradle/3.4.2","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/crashlytics/com.crashlytics.sdk.android@2.9.5","type":"library","group":"crashlytics","name":"com.crashlytics.sdk.android","version":"2.9.5","scope":"required","purl":"pkg:maven/crashlytics/com.crashlytics.sdk.android@2.9.5","externalReferences":[{"url":"https://mvnrepository.com/artifact/com.crashlytics.sdk.android/crashlytics/2.9.5","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/facebook-login/com.facebook.android@4.36.1","type":"library","author":"Facebook","group":"facebook-login","name":"com.facebook.android","version":"4.36.1","scope":"required","licenses":[{"license":{"name":"Facebook Software License","text":{"content":"WW91IGFyZSBoZXJlYnkgZ3JhbnRlZCBhIG5vbi1leGNsdXNpdmUsIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlIGxpY2Vuc2UgdG8gdXNlLApjb3B5LCBtb2RpZnksIGFuZCBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgaW4gc291cmNlIGNvZGUgb3IgYmluYXJ5IGZvcm0gZm9yIHVzZQppbiBjb25uZWN0aW9uIHdpdGggdGhlIHdlYiBzZXJ2aWNlcyBhbmQgQVBJcyBwcm92aWRlZCBieSBGYWNlYm9vay4KCkFzIHdpdGggYW55IHNvZnR3YXJlIHRoYXQgaW50ZWdyYXRlcyB3aXRoIHRoZSBGYWNlYm9vayBwbGF0Zm9ybSwgeW91ciB1c2Ugb2YKdGhpcyBzb2Z0d2FyZSBpcyBzdWJqZWN0IHRvIHRoZSBGYWNlYm9vayBEZXZlbG9wZXIgUHJpbmNpcGxlcyBhbmQgUG9saWNpZXMKW2h0dHA6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9wb2xpY3kvXS4gVGhpcyBjb3B5cmlnaHQgbm90aWNlIHNoYWxsIGJlCmluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIHNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MKRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SCkNPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUgpJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTgpDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLg==","contentType":"text/plain","encoding":"base64"},"url":"https://github.com/facebook/facebook-android-sdk/blob/752ea7b77a1779ed8b784dbd55a886cc00aeb8a6/LICENSE.txt"}}],"purl":"pkg:maven/facebook-login/com.facebook.android@4.36.1","externalReferences":[{"url":"https://github.com/facebook/facebook-android-sdk","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.facebook.android/facebook-login/4.36.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2018-09-15T06:36:22+00:00"}]},{"bom-ref":"pkg:maven/androiddevmetrics-plugin/com.frogermcs.androiddevmetrics@0.4","type":"library","group":"androiddevmetrics-plugin","name":"com.frogermcs.androiddevmetrics","version":"0.4","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/androiddevmetrics-plugin/com.frogermcs.androiddevmetrics@0.4","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"}]},{"bom-ref":"pkg:maven/glide/com.github.bumptech.glide@4.9.0","type":"library","author":"Sam Judd","group":"glide","name":"com.github.bumptech.glide","version":"4.9.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}},{"license":{"id":"BSD-2-Clause","text":{"content":"Q29weXJpZ2h0IChjKSA8eWVhcj4gPG93bmVyPiAKClJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDoKCjEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCjIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi4KClRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgIkFTIElTIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/BSD-2-Clause"}}],"purl":"pkg:maven/glide/com.github.bumptech.glide@4.9.0","externalReferences":[{"url":"https://github.com/bumptech/glide","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.github.bumptech.glide/glide/4.9.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-02-14T20:16:00+00:00"}]},{"bom-ref":"pkg:maven/blockcanary-android/com.github.markzhai@1.5.0","type":"library","author":"markzhai","group":"blockcanary-android","name":"com.github.markzhai","version":"1.5.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/blockcanary-android/com.github.markzhai@1.5.0","externalReferences":[{"url":"https://github.com/markzhai/AndroidPerformanceMonitor","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.github.markzhai/blockcanary-android/1.5.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"debugImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-02-26T03:13:18+00:00"}]},{"bom-ref":"pkg:maven/blockcanary-no-op/com.github.markzhai@1.5.0","type":"library","group":"blockcanary-no-op","name":"com.github.markzhai","version":"1.5.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/blockcanary-no-op/com.github.markzhai@1.5.0","externalReferences":[{"url":"https://mvnrepository.com/artifact/com.github.markzhai/blockcanary-no-op/1.5.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"releaseImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-02-26T02:57:34+00:00"}]},{"bom-ref":"pkg:maven/otr4j/com.github.redsolution","type":"library","group":"otr4j","name":"com.github.redsolution","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/otr4j/com.github.redsolution","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/smack-android-extensions/com.github.str4tocaster.smack","type":"library","group":"smack-android-extensions","name":"com.github.str4tocaster.smack","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/smack-android-extensions/com.github.str4tocaster.smack","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/smack-experimental/com.github.str4tocaster.smack","type":"library","group":"smack-experimental","name":"com.github.str4tocaster.smack","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/smack-experimental/com.github.str4tocaster.smack","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/smack-resolver-dnsjava/com.github.str4tocaster.smack","type":"library","group":"smack-resolver-dnsjava","name":"com.github.str4tocaster.smack","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/smack-resolver-dnsjava/com.github.str4tocaster.smack","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/smack-tcp/com.github.str4tocaster.smack","type":"library","group":"smack-tcp","name":"com.github.str4tocaster.smack","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/smack-tcp/com.github.str4tocaster.smack","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/play-services-auth/com.google.android.gms@15.0.0","type":"library","group":"play-services-auth","name":"com.google.android.gms","version":"15.0.0","scope":"required","licenses":[{"license":{"name":"Android Software Development Kit License Agreement 2015","text":{"content":"VGhpcyBpcyB0aGUgQW5kcm9pZCBTb2Z0d2FyZSBEZXZlbG9wbWVudCBLaXQgTGljZW5zZSBBZ3JlZW1lbnQKCjEuIEludHJvZHVjdGlvbgoKMS4xIFRoZSBBbmRyb2lkIFNvZnR3YXJlIERldmVsb3BtZW50IEtpdCAocmVmZXJyZWQgdG8gaW4gdGhlIExpY2Vuc2UgQWdyZWVtZW50CmFzIHRoZSAiU0RLIiBhbmQgc3BlY2lmaWNhbGx5IGluY2x1ZGluZyB0aGUgQW5kcm9pZCBzeXN0ZW0gZmlsZXMsIHBhY2thZ2VkIEFQSXMsCmFuZCBHb29nbGUgQVBJcyBhZGQtb25zKSBpcyBsaWNlbnNlZCB0byB5b3Ugc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIExpY2Vuc2UKQWdyZWVtZW50LiBUaGUgTGljZW5zZSBBZ3JlZW1lbnQgZm9ybXMgYSBsZWdhbGx5IGJpbmRpbmcgY29udHJhY3QgYmV0d2VlbiB5b3UKYW5kIEdvb2dsZSBpbiByZWxhdGlvbiB0byB5b3VyIHVzZSBvZiB0aGUgU0RLLgoKMS4yICJBbmRyb2lkIiBtZWFucyB0aGUgQW5kcm9pZCBzb2Z0d2FyZSBzdGFjayBmb3IgZGV2aWNlcywgYXMgbWFkZSBhdmFpbGFibGUKdW5kZXIgdGhlIEFuZHJvaWQgT3BlbiBTb3VyY2UgUHJvamVjdCwgd2hpY2ggaXMgbG9jYXRlZCBhdCB0aGUgZm9sbG93aW5nIFVSTDoKaHR0cDovL3NvdXJjZS5hbmRyb2lkLmNvbS8sIGFzIHVwZGF0ZWQgZnJvbSB0aW1lIHRvIHRpbWUuCgoxLjMgQSAiY29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbiIgbWVhbnMgYW55IEFuZHJvaWQgZGV2aWNlIHRoYXQgKGkpIGNvbXBsaWVzCndpdGggdGhlIEFuZHJvaWQgQ29tcGF0aWJpbGl0eSBEZWZpbml0aW9uIGRvY3VtZW50LCB3aGljaCBjYW4gYmUgZm91bmQgYXQgdGhlCkFuZHJvaWQgY29tcGF0aWJpbGl0eSB3ZWJzaXRlIChodHRwOi8vc291cmNlLmFuZHJvaWQuY29tL2NvbXBhdGliaWxpdHkpIGFuZAp3aGljaCBtYXkgYmUgdXBkYXRlZCBmcm9tIHRpbWUgdG8gdGltZTsgYW5kIChpaSkgc3VjY2Vzc2Z1bGx5IHBhc3NlcyB0aGUgQW5kcm9pZApDb21wYXRpYmlsaXR5IFRlc3QgU3VpdGUgKENUUykuCgoxLjQgIkdvb2dsZSIgbWVhbnMgR29vZ2xlIEluYy4sIGEgRGVsYXdhcmUgY29ycG9yYXRpb24gd2l0aCBwcmluY2lwYWwgcGxhY2Ugb2YKYnVzaW5lc3MgYXQgMTYwMCBBbXBoaXRoZWF0cmUgUGFya3dheSwgTW91bnRhaW4gVmlldywgQ0EgOTQwNDMsIFVuaXRlZCBTdGF0ZXMuCgoKMi4gQWNjZXB0aW5nIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQKCjIuMSBJbiBvcmRlciB0byB1c2UgdGhlIFNESywgeW91IG11c3QgZmlyc3QgYWdyZWUgdG8gdGhlIExpY2Vuc2UgQWdyZWVtZW50LiBZb3UKbWF5IG5vdCB1c2UgdGhlIFNESyBpZiB5b3UgZG8gbm90IGFjY2VwdCB0aGUgTGljZW5zZSBBZ3JlZW1lbnQuCgoyLjIgQnkgY2xpY2tpbmcgdG8gYWNjZXB0LCB5b3UgaGVyZWJ5IGFncmVlIHRvIHRoZSB0ZXJtcyBvZiB0aGUgTGljZW5zZQpBZ3JlZW1lbnQuCgoyLjMgWW91IG1heSBub3QgdXNlIHRoZSBTREsgYW5kIG1heSBub3QgYWNjZXB0IHRoZSBMaWNlbnNlIEFncmVlbWVudCBpZiB5b3UgYXJlCmEgcGVyc29uIGJhcnJlZCBmcm9tIHJlY2VpdmluZyB0aGUgU0RLIHVuZGVyIHRoZSBsYXdzIG9mIHRoZSBVbml0ZWQgU3RhdGVzIG9yCm90aGVyIGNvdW50cmllcywgaW5jbHVkaW5nIHRoZSBjb3VudHJ5IGluIHdoaWNoIHlvdSBhcmUgcmVzaWRlbnQgb3IgZnJvbSB3aGljaAp5b3UgdXNlIHRoZSBTREsuCgoyLjQgSWYgeW91IGFyZSBhZ3JlZWluZyB0byBiZSBib3VuZCBieSB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgb24gYmVoYWxmIG9mIHlvdXIKZW1wbG95ZXIgb3Igb3RoZXIgZW50aXR5LCB5b3UgcmVwcmVzZW50IGFuZCB3YXJyYW50IHRoYXQgeW91IGhhdmUgZnVsbCBsZWdhbAphdXRob3JpdHkgdG8gYmluZCB5b3VyIGVtcGxveWVyIG9yIHN1Y2ggZW50aXR5IHRvIHRoZSBMaWNlbnNlIEFncmVlbWVudC4gSWYgeW91CmRvIG5vdCBoYXZlIHRoZSByZXF1aXNpdGUgYXV0aG9yaXR5LCB5b3UgbWF5IG5vdCBhY2NlcHQgdGhlIExpY2Vuc2UgQWdyZWVtZW50IG9yCnVzZSB0aGUgU0RLIG9uIGJlaGFsZiBvZiB5b3VyIGVtcGxveWVyIG9yIG90aGVyIGVudGl0eS4KCgozLiBTREsgTGljZW5zZSBmcm9tIEdvb2dsZQoKMy4xIFN1YmplY3QgdG8gdGhlIHRlcm1zIG9mIHRoZSBMaWNlbnNlIEFncmVlbWVudCwgR29vZ2xlIGdyYW50cyB5b3UgYSBsaW1pdGVkLAp3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIG5vbi1leGNsdXNpdmUsIGFuZCBub24tc3VibGljZW5zYWJsZQpsaWNlbnNlIHRvIHVzZSB0aGUgU0RLIHNvbGVseSB0byBkZXZlbG9wIGFwcGxpY2F0aW9ucyBmb3IgY29tcGF0aWJsZQppbXBsZW1lbnRhdGlvbnMgb2YgQW5kcm9pZC4KCjMuMiBZb3UgbWF5IG5vdCB1c2UgdGhpcyBTREsgdG8gZGV2ZWxvcCBhcHBsaWNhdGlvbnMgZm9yIG90aGVyIHBsYXRmb3JtcwooaW5jbHVkaW5nIG5vbi1jb21wYXRpYmxlIGltcGxlbWVudGF0aW9ucyBvZiBBbmRyb2lkKSBvciB0byBkZXZlbG9wIGFub3RoZXIgU0RLLgpZb3UgYXJlIG9mIGNvdXJzZSBmcmVlIHRvIGRldmVsb3AgYXBwbGljYXRpb25zIGZvciBvdGhlciBwbGF0Zm9ybXMsIGluY2x1ZGluZwpub24tY29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbnMgb2YgQW5kcm9pZCwgcHJvdmlkZWQgdGhhdCB0aGlzIFNESyBpcyBub3QgdXNlZApmb3IgdGhhdCBwdXJwb3NlLgoKMy4zIFlvdSBhZ3JlZSB0aGF0IEdvb2dsZSBvciB0aGlyZCBwYXJ0aWVzIG93biBhbGwgbGVnYWwgcmlnaHQsIHRpdGxlIGFuZAppbnRlcmVzdCBpbiBhbmQgdG8gdGhlIFNESywgaW5jbHVkaW5nIGFueSBJbnRlbGxlY3R1YWwgUHJvcGVydHkgUmlnaHRzIHRoYXQKc3Vic2lzdCBpbiB0aGUgU0RLLiAiSW50ZWxsZWN0dWFsIFByb3BlcnR5IFJpZ2h0cyIgbWVhbnMgYW55IGFuZCBhbGwgcmlnaHRzCnVuZGVyIHBhdGVudCBsYXcsIGNvcHlyaWdodCBsYXcsIHRyYWRlIHNlY3JldCBsYXcsIHRyYWRlbWFyayBsYXcsIGFuZCBhbnkgYW5kCmFsbCBvdGhlciBwcm9wcmlldGFyeSByaWdodHMuIEdvb2dsZSByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZAp0byB5b3UuCgozLjQgWW91IG1heSBub3QgdXNlIHRoZSBTREsgZm9yIGFueSBwdXJwb3NlIG5vdCBleHByZXNzbHkgcGVybWl0dGVkIGJ5IHRoZQpMaWNlbnNlIEFncmVlbWVudC4gIEV4Y2VwdCB0byB0aGUgZXh0ZW50IHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgdGhpcmQgcGFydHkKbGljZW5zZXMsIHlvdSBtYXkgbm90OiAoYSkgY29weSAoZXhjZXB0IGZvciBiYWNrdXAgcHVycG9zZXMpLCBtb2RpZnksIGFkYXB0LApyZWRpc3RyaWJ1dGUsIGRlY29tcGlsZSwgcmV2ZXJzZSBlbmdpbmVlciwgZGlzYXNzZW1ibGUsIG9yIGNyZWF0ZSBkZXJpdmF0aXZlCndvcmtzIG9mIHRoZSBTREsgb3IgYW55IHBhcnQgb2YgdGhlIFNESzsgb3IgKGIpIGxvYWQgYW55IHBhcnQgb2YgdGhlIFNESyBvbnRvIGEKbW9iaWxlIGhhbmRzZXQgb3IgYW55IG90aGVyIGhhcmR3YXJlIGRldmljZSBleGNlcHQgYSBwZXJzb25hbCBjb21wdXRlciwgY29tYmluZQphbnkgcGFydCBvZiB0aGUgU0RLIHdpdGggb3RoZXIgc29mdHdhcmUsIG9yIGRpc3RyaWJ1dGUgYW55IHNvZnR3YXJlIG9yIGRldmljZQppbmNvcnBvcmF0aW5nIGEgcGFydCBvZiB0aGUgU0RLLgoKMy41IFVzZSwgcmVwcm9kdWN0aW9uIGFuZCBkaXN0cmlidXRpb24gb2YgY29tcG9uZW50cyBvZiB0aGUgU0RLIGxpY2Vuc2VkIHVuZGVyCmFuIG9wZW4gc291cmNlIHNvZnR3YXJlIGxpY2Vuc2UgYXJlIGdvdmVybmVkIHNvbGVseSBieSB0aGUgdGVybXMgb2YgdGhhdCBvcGVuCnNvdXJjZSBzb2Z0d2FyZSBsaWNlbnNlIGFuZCBub3QgdGhlIExpY2Vuc2UgQWdyZWVtZW50LgoKMy42IFlvdSBhZ3JlZSB0aGF0IHRoZSBmb3JtIGFuZCBuYXR1cmUgb2YgdGhlIFNESyB0aGF0IEdvb2dsZSBwcm92aWRlcyBtYXkKY2hhbmdlIHdpdGhvdXQgcHJpb3Igbm90aWNlIHRvIHlvdSBhbmQgdGhhdCBmdXR1cmUgdmVyc2lvbnMgb2YgdGhlIFNESyBtYXkgYmUKaW5jb21wYXRpYmxlIHdpdGggYXBwbGljYXRpb25zIGRldmVsb3BlZCBvbiBwcmV2aW91cyB2ZXJzaW9ucyBvZiB0aGUgU0RLLiBZb3UKYWdyZWUgdGhhdCBHb29nbGUgbWF5IHN0b3AgKHBlcm1hbmVudGx5IG9yIHRlbXBvcmFyaWx5KSBwcm92aWRpbmcgdGhlIFNESyAob3IKYW55IGZlYXR1cmVzIHdpdGhpbiB0aGUgU0RLKSB0byB5b3Ugb3IgdG8gdXNlcnMgZ2VuZXJhbGx5IGF0IEdvb2dsZSdzIHNvbGUKZGlzY3JldGlvbiwgd2l0aG91dCBwcmlvciBub3RpY2UgdG8geW91LgoKMy43IE5vdGhpbmcgaW4gdGhlIExpY2Vuc2UgQWdyZWVtZW50IGdpdmVzIHlvdSBhIHJpZ2h0IHRvIHVzZSBhbnkgb2YgR29vZ2xlJ3MKdHJhZGUgbmFtZXMsIHRyYWRlbWFya3MsIHNlcnZpY2UgbWFya3MsIGxvZ29zLCBkb21haW4gbmFtZXMsIG9yIG90aGVyCmRpc3RpbmN0aXZlIGJyYW5kIGZlYXR1cmVzLgoKMy44IFlvdSBhZ3JlZSB0aGF0IHlvdSB3aWxsIG5vdCByZW1vdmUsIG9ic2N1cmUsIG9yIGFsdGVyIGFueSBwcm9wcmlldGFyeSByaWdodHMKbm90aWNlcyAoaW5jbHVkaW5nIGNvcHlyaWdodCBhbmQgdHJhZGVtYXJrIG5vdGljZXMpIHRoYXQgbWF5IGJlIGFmZml4ZWQgdG8gb3IKY29udGFpbmVkIHdpdGhpbiB0aGUgU0RLLgoKCjQuIFVzZSBvZiB0aGUgU0RLIGJ5IFlvdQoKNC4xIEdvb2dsZSBhZ3JlZXMgdGhhdCBpdCBvYnRhaW5zIG5vIHJpZ2h0LCB0aXRsZSBvciBpbnRlcmVzdCBmcm9tIHlvdSAob3IgeW91cgpsaWNlbnNvcnMpIHVuZGVyIHRoZSBMaWNlbnNlIEFncmVlbWVudCBpbiBvciB0byBhbnkgc29mdHdhcmUgYXBwbGljYXRpb25zIHRoYXQKeW91IGRldmVsb3AgdXNpbmcgdGhlIFNESywgaW5jbHVkaW5nIGFueSBpbnRlbGxlY3R1YWwgcHJvcGVydHkgcmlnaHRzIHRoYXQKc3Vic2lzdCBpbiB0aG9zZSBhcHBsaWNhdGlvbnMuCgo0LjIgWW91IGFncmVlIHRvIHVzZSB0aGUgU0RLIGFuZCB3cml0ZSBhcHBsaWNhdGlvbnMgb25seSBmb3IgcHVycG9zZXMgdGhhdCBhcmUKcGVybWl0dGVkIGJ5IChhKSB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgYW5kIChiKSBhbnkgYXBwbGljYWJsZSBsYXcsIHJlZ3VsYXRpb24gb3IKZ2VuZXJhbGx5IGFjY2VwdGVkIHByYWN0aWNlcyBvciBndWlkZWxpbmVzIGluIHRoZSByZWxldmFudCBqdXJpc2RpY3Rpb25zCihpbmNsdWRpbmcgYW55IGxhd3MgcmVnYXJkaW5nIHRoZSBleHBvcnQgb2YgZGF0YSBvciBzb2Z0d2FyZSB0byBhbmQgZnJvbSB0aGUKVW5pdGVkIFN0YXRlcyBvciBvdGhlciByZWxldmFudCBjb3VudHJpZXMpLgoKNC4zIFlvdSBhZ3JlZSB0aGF0IGlmIHlvdSB1c2UgdGhlIFNESyB0byBkZXZlbG9wIGFwcGxpY2F0aW9ucyBmb3IgZ2VuZXJhbCBwdWJsaWMKdXNlcnMsIHlvdSB3aWxsIHByb3RlY3QgdGhlIHByaXZhY3kgYW5kIGxlZ2FsIHJpZ2h0cyBvZiB0aG9zZSB1c2Vycy4gSWYgdGhlCnVzZXJzIHByb3ZpZGUgeW91IHdpdGggdXNlciBuYW1lcywgcGFzc3dvcmRzLCBvciBvdGhlciBsb2dpbiBpbmZvcm1hdGlvbiBvcgpwZXJzb25hbCBpbmZvcm1hdGlvbiwgeW91IG11c3QgbWFrZSB0aGUgdXNlcnMgYXdhcmUgdGhhdCB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZQphdmFpbGFibGUgdG8geW91ciBhcHBsaWNhdGlvbiwgYW5kIHlvdSBtdXN0IHByb3ZpZGUgbGVnYWxseSBhZGVxdWF0ZSBwcml2YWN5Cm5vdGljZSBhbmQgcHJvdGVjdGlvbiBmb3IgdGhvc2UgdXNlcnMuIElmIHlvdXIgYXBwbGljYXRpb24gc3RvcmVzIHBlcnNvbmFsIG9yCnNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBwcm92aWRlZCBieSB1c2VycywgaXQgbXVzdCBkbyBzbyBzZWN1cmVseS4gSWYgdGhlIHVzZXIKcHJvdmlkZXMgeW91ciBhcHBsaWNhdGlvbiB3aXRoIEdvb2dsZSBBY2NvdW50IGluZm9ybWF0aW9uLCB5b3VyIGFwcGxpY2F0aW9uIG1heQpvbmx5IHVzZSB0aGF0IGluZm9ybWF0aW9uIHRvIGFjY2VzcyB0aGUgdXNlcidzIEdvb2dsZSBBY2NvdW50IHdoZW4sIGFuZCBmb3IgdGhlCmxpbWl0ZWQgcHVycG9zZXMgZm9yIHdoaWNoLCB0aGUgdXNlciBoYXMgZ2l2ZW4geW91IHBlcm1pc3Npb24gdG8gZG8gc28uCgo0LjQgWW91IGFncmVlIHRoYXQgeW91IHdpbGwgbm90IGVuZ2FnZSBpbiBhbnkgYWN0aXZpdHkgd2l0aCB0aGUgU0RLLCBpbmNsdWRpbmcKdGhlIGRldmVsb3BtZW50IG9yIGRpc3RyaWJ1dGlvbiBvZiBhbiBhcHBsaWNhdGlvbiwgdGhhdCBpbnRlcmZlcmVzIHdpdGgsCmRpc3J1cHRzLCBkYW1hZ2VzLCBvciBhY2Nlc3NlcyBpbiBhbiB1bmF1dGhvcml6ZWQgbWFubmVyIHRoZSBzZXJ2ZXJzLCBuZXR3b3JrcywKb3Igb3RoZXIgcHJvcGVydGllcyBvciBzZXJ2aWNlcyBvZiBhbnkgdGhpcmQgcGFydHkgaW5jbHVkaW5nLCBidXQgbm90IGxpbWl0ZWQKdG8sIEdvb2dsZSBvciBhbnkgbW9iaWxlIGNvbW11bmljYXRpb25zIGNhcnJpZXIuCgo0LjUgWW91IGFncmVlIHRoYXQgeW91IGFyZSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIChhbmQgdGhhdCBHb29nbGUgaGFzIG5vCnJlc3BvbnNpYmlsaXR5IHRvIHlvdSBvciB0byBhbnkgdGhpcmQgcGFydHkgZm9yKSBhbnkgZGF0YSwgY29udGVudCwgb3IgcmVzb3VyY2VzCnRoYXQgeW91IGNyZWF0ZSwgdHJhbnNtaXQgb3IgZGlzcGxheSB0aHJvdWdoIEFuZHJvaWQgYW5kL29yIGFwcGxpY2F0aW9ucyBmb3IKQW5kcm9pZCwgYW5kIGZvciB0aGUgY29uc2VxdWVuY2VzIG9mIHlvdXIgYWN0aW9ucyAoaW5jbHVkaW5nIGFueSBsb3NzIG9yIGRhbWFnZQp3aGljaCBHb29nbGUgbWF5IHN1ZmZlcikgYnkgZG9pbmcgc28uCgo0LjYgWW91IGFncmVlIHRoYXQgeW91IGFyZSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIChhbmQgdGhhdCBHb29nbGUgaGFzIG5vCnJlc3BvbnNpYmlsaXR5IHRvIHlvdSBvciB0byBhbnkgdGhpcmQgcGFydHkgZm9yKSBhbnkgYnJlYWNoIG9mIHlvdXIgb2JsaWdhdGlvbnMKdW5kZXIgdGhlIExpY2Vuc2UgQWdyZWVtZW50LCBhbnkgYXBwbGljYWJsZSB0aGlyZCBwYXJ0eSBjb250cmFjdCBvciBUZXJtcyBvZgpTZXJ2aWNlLCBvciBhbnkgYXBwbGljYWJsZSBsYXcgb3IgcmVndWxhdGlvbiwgYW5kIGZvciB0aGUgY29uc2VxdWVuY2VzCihpbmNsdWRpbmcgYW55IGxvc3Mgb3IgZGFtYWdlIHdoaWNoIEdvb2dsZSBvciBhbnkgdGhpcmQgcGFydHkgbWF5IHN1ZmZlcikgb2YgYW55CnN1Y2ggYnJlYWNoLgoKCjUuIFlvdXIgRGV2ZWxvcGVyIENyZWRlbnRpYWxzCgo1LjEgWW91IGFncmVlIHRoYXQgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgbWFpbnRhaW5pbmcgdGhlIGNvbmZpZGVudGlhbGl0eSBvZgphbnkgZGV2ZWxvcGVyIGNyZWRlbnRpYWxzIHRoYXQgbWF5IGJlIGlzc3VlZCB0byB5b3UgYnkgR29vZ2xlIG9yIHdoaWNoIHlvdSBtYXkKY2hvb3NlIHlvdXJzZWxmIGFuZCB0aGF0IHlvdSB3aWxsIGJlIHNvbGVseSByZXNwb25zaWJsZSBmb3IgYWxsIGFwcGxpY2F0aW9ucwp0aGF0IGFyZSBkZXZlbG9wZWQgdW5kZXIgeW91ciBkZXZlbG9wZXIgY3JlZGVudGlhbHMuCgoKNi4gUHJpdmFjeSBhbmQgSW5mb3JtYXRpb24KCjYuMSBJbiBvcmRlciB0byBjb250aW51YWxseSBpbm5vdmF0ZSBhbmQgaW1wcm92ZSB0aGUgU0RLLCBHb29nbGUgbWF5IGNvbGxlY3QKY2VydGFpbiB1c2FnZSBzdGF0aXN0aWNzIGZyb20gdGhlIHNvZnR3YXJlIGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gYSB1bmlxdWUKaWRlbnRpZmllciwgYXNzb2NpYXRlZCBJUCBhZGRyZXNzLCB2ZXJzaW9uIG51bWJlciBvZiB0aGUgc29mdHdhcmUsIGFuZAppbmZvcm1hdGlvbiBvbiB3aGljaCB0b29scyBhbmQvb3Igc2VydmljZXMgaW4gdGhlIFNESyBhcmUgYmVpbmcgdXNlZCBhbmQgaG93CnRoZXkgYXJlIGJlaW5nIHVzZWQuIEJlZm9yZSBhbnkgb2YgdGhpcyBpbmZvcm1hdGlvbiBpcyBjb2xsZWN0ZWQsIHRoZSBTREsgd2lsbApub3RpZnkgeW91IGFuZCBzZWVrIHlvdXIgY29uc2VudC4gSWYgeW91IHdpdGhob2xkIGNvbnNlbnQsIHRoZSBpbmZvcm1hdGlvbiB3aWxsCm5vdCBiZSBjb2xsZWN0ZWQuCgo2LjIgVGhlIGRhdGEgY29sbGVjdGVkIGlzIGV4YW1pbmVkIGluIHRoZSBhZ2dyZWdhdGUgdG8gaW1wcm92ZSB0aGUgU0RLIGFuZCBpcwptYWludGFpbmVkIGluIGFjY29yZGFuY2Ugd2l0aCBHb29nbGUncyBQcml2YWN5IFBvbGljeS4KCgo3LiBUaGlyZCBQYXJ0eSBBcHBsaWNhdGlvbnMKCjcuMSBJZiB5b3UgdXNlIHRoZSBTREsgdG8gcnVuIGFwcGxpY2F0aW9ucyBkZXZlbG9wZWQgYnkgYSB0aGlyZCBwYXJ0eSBvciB0aGF0CmFjY2VzcyBkYXRhLCBjb250ZW50IG9yIHJlc291cmNlcyBwcm92aWRlZCBieSBhIHRoaXJkIHBhcnR5LCB5b3UgYWdyZWUgdGhhdApHb29nbGUgaXMgbm90IHJlc3BvbnNpYmxlIGZvciB0aG9zZSBhcHBsaWNhdGlvbnMsIGRhdGEsIGNvbnRlbnQsIG9yIHJlc291cmNlcy4KWW91IHVuZGVyc3RhbmQgdGhhdCBhbGwgZGF0YSwgY29udGVudCBvciByZXNvdXJjZXMgd2hpY2ggeW91IG1heSBhY2Nlc3MgdGhyb3VnaApzdWNoIHRoaXJkIHBhcnR5IGFwcGxpY2F0aW9ucyBhcmUgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIHBlcnNvbiBmcm9tCndoaWNoIHRoZXkgb3JpZ2luYXRlZCBhbmQgdGhhdCBHb29nbGUgaXMgbm90IGxpYWJsZSBmb3IgYW55IGxvc3Mgb3IgZGFtYWdlIHRoYXQKeW91IG1heSBleHBlcmllbmNlIGFzIGEgcmVzdWx0IG9mIHRoZSB1c2Ugb3IgYWNjZXNzIG9mIGFueSBvZiB0aG9zZSB0aGlyZCBwYXJ0eQphcHBsaWNhdGlvbnMsIGRhdGEsIGNvbnRlbnQsIG9yIHJlc291cmNlcy4KCjcuMiBZb3Ugc2hvdWxkIGJlIGF3YXJlIHRoZSBkYXRhLCBjb250ZW50LCBhbmQgcmVzb3VyY2VzIHByZXNlbnRlZCB0byB5b3UKdGhyb3VnaCBzdWNoIGEgdGhpcmQgcGFydHkgYXBwbGljYXRpb24gbWF5IGJlIHByb3RlY3RlZCBieSBpbnRlbGxlY3R1YWwgcHJvcGVydHkKcmlnaHRzIHdoaWNoIGFyZSBvd25lZCBieSB0aGUgcHJvdmlkZXJzIChvciBieSBvdGhlciBwZXJzb25zIG9yIGNvbXBhbmllcyBvbgp0aGVpciBiZWhhbGYpLiBZb3UgbWF5IG5vdCBtb2RpZnksIHJlbnQsIGxlYXNlLCBsb2FuLCBzZWxsLCBkaXN0cmlidXRlIG9yIGNyZWF0ZQpkZXJpdmF0aXZlIHdvcmtzIGJhc2VkIG9uIHRoZXNlIGRhdGEsIGNvbnRlbnQsIG9yIHJlc291cmNlcyAoZWl0aGVyIGluIHdob2xlIG9yCmluIHBhcnQpIHVubGVzcyB5b3UgaGF2ZSBiZWVuIHNwZWNpZmljYWxseSBnaXZlbiBwZXJtaXNzaW9uIHRvIGRvIHNvIGJ5IHRoZQpyZWxldmFudCBvd25lcnMuCgo3LjMgWW91IGFja25vd2xlZGdlIHRoYXQgeW91ciB1c2Ugb2Ygc3VjaCB0aGlyZCBwYXJ0eSBhcHBsaWNhdGlvbnMsIGRhdGEsCmNvbnRlbnQsIG9yIHJlc291cmNlcyBtYXkgYmUgc3ViamVjdCB0byBzZXBhcmF0ZSB0ZXJtcyBiZXR3ZWVuIHlvdSBhbmQgdGhlCnJlbGV2YW50IHRoaXJkIHBhcnR5LiBJbiB0aGF0IGNhc2UsIHRoZSBMaWNlbnNlIEFncmVlbWVudCBkb2VzIG5vdCBhZmZlY3QgeW91cgpsZWdhbCByZWxhdGlvbnNoaXAgd2l0aCB0aGVzZSB0aGlyZCBwYXJ0aWVzLgoKCjguIFVzaW5nIEFuZHJvaWQgQVBJcwoKOC4xIEdvb2dsZSBEYXRhIEFQSXMKCjguMS4xIElmIHlvdSB1c2UgYW55IEFQSSB0byByZXRyaWV2ZSBkYXRhIGZyb20gR29vZ2xlLCB5b3UgYWNrbm93bGVkZ2UgdGhhdCB0aGUKZGF0YSBtYXkgYmUgcHJvdGVjdGVkIGJ5IGludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodHMgd2hpY2ggYXJlIG93bmVkIGJ5IEdvb2dsZQpvciB0aG9zZSBwYXJ0aWVzIHRoYXQgcHJvdmlkZSB0aGUgZGF0YSAob3IgYnkgb3RoZXIgcGVyc29ucyBvciBjb21wYW5pZXMgb24KdGhlaXIgYmVoYWxmKS4gWW91ciB1c2Ugb2YgYW55IHN1Y2ggQVBJIG1heSBiZSBzdWJqZWN0IHRvIGFkZGl0aW9uYWwgVGVybXMgb2YKU2VydmljZS4gWW91IG1heSBub3QgbW9kaWZ5LCByZW50LCBsZWFzZSwgbG9hbiwgc2VsbCwgZGlzdHJpYnV0ZSBvciBjcmVhdGUKZGVyaXZhdGl2ZSB3b3JrcyBiYXNlZCBvbiB0aGlzIGRhdGEgKGVpdGhlciBpbiB3aG9sZSBvciBpbiBwYXJ0KSB1bmxlc3MgYWxsb3dlZApieSB0aGUgcmVsZXZhbnQgVGVybXMgb2YgU2VydmljZS4KCjguMS4yIElmIHlvdSB1c2UgYW55IEFQSSB0byByZXRyaWV2ZSBhIHVzZXIncyBkYXRhIGZyb20gR29vZ2xlLCB5b3UgYWNrbm93bGVkZ2UKYW5kIGFncmVlIHRoYXQgeW91IHNoYWxsIHJldHJpZXZlIGRhdGEgb25seSB3aXRoIHRoZSB1c2VyJ3MgZXhwbGljaXQgY29uc2VudCBhbmQKb25seSB3aGVuLCBhbmQgZm9yIHRoZSBsaW1pdGVkIHB1cnBvc2VzIGZvciB3aGljaCwgdGhlIHVzZXIgaGFzIGdpdmVuIHlvdQpwZXJtaXNzaW9uIHRvIGRvIHNvLgoKCjkuIFRlcm1pbmF0aW5nIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQKCjkuMSBUaGUgTGljZW5zZSBBZ3JlZW1lbnQgd2lsbCBjb250aW51ZSB0byBhcHBseSB1bnRpbCB0ZXJtaW5hdGVkIGJ5IGVpdGhlciB5b3UKb3IgR29vZ2xlIGFzIHNldCBvdXQgYmVsb3cuCgo5LjIgSWYgeW91IHdhbnQgdG8gdGVybWluYXRlIHRoZSBMaWNlbnNlIEFncmVlbWVudCwgeW91IG1heSBkbyBzbyBieSBjZWFzaW5nCnlvdXIgdXNlIG9mIHRoZSBTREsgYW5kIGFueSByZWxldmFudCBkZXZlbG9wZXIgY3JlZGVudGlhbHMuCgo5LjMgR29vZ2xlIG1heSBhdCBhbnkgdGltZSwgdGVybWluYXRlIHRoZSBMaWNlbnNlIEFncmVlbWVudCB3aXRoIHlvdSBpZjoKKEEpIHlvdSBoYXZlIGJyZWFjaGVkIGFueSBwcm92aXNpb24gb2YgdGhlIExpY2Vuc2UgQWdyZWVtZW50OyBvcgoKKEIpIEdvb2dsZSBpcyByZXF1aXJlZCB0byBkbyBzbyBieSBsYXc7IG9yCgooQykgdGhlIHBhcnRuZXIgd2l0aCB3aG9tIEdvb2dsZSBvZmZlcmVkIGNlcnRhaW4gcGFydHMgb2YgU0RLIChzdWNoIGFzIEFQSXMpIHRvCnlvdSBoYXMgdGVybWluYXRlZCBpdHMgcmVsYXRpb25zaGlwIHdpdGggR29vZ2xlIG9yIGNlYXNlZCB0byBvZmZlciBjZXJ0YWluIHBhcnRzCm9mIHRoZSBTREsgdG8geW91OyBvcgoKKEQpIEdvb2dsZSBkZWNpZGVzIHRvIG5vIGxvbmdlciBwcm92aWRlIHRoZSBTREsgb3IgY2VydGFpbiBwYXJ0cyBvZiB0aGUgU0RLIHRvCnVzZXJzIGluIHRoZSBjb3VudHJ5IGluIHdoaWNoIHlvdSBhcmUgcmVzaWRlbnQgb3IgZnJvbSB3aGljaCB5b3UgdXNlIHRoZQpzZXJ2aWNlLCBvciB0aGUgcHJvdmlzaW9uIG9mIHRoZSBTREsgb3IgY2VydGFpbiBTREsgc2VydmljZXMgdG8geW91IGJ5IEdvb2dsZQppcywgaW4gR29vZ2xlJ3Mgc29sZSBkaXNjcmV0aW9uLCBubyBsb25nZXIgY29tbWVyY2lhbGx5IHZpYWJsZS4KCjkuNCBXaGVuIHRoZSBMaWNlbnNlIEFncmVlbWVudCBjb21lcyB0byBhbiBlbmQsIGFsbCBvZiB0aGUgbGVnYWwgcmlnaHRzLApvYmxpZ2F0aW9ucyBhbmQgbGlhYmlsaXRpZXMgdGhhdCB5b3UgYW5kIEdvb2dsZSBoYXZlIGJlbmVmaXRlZCBmcm9tLCBiZWVuCnN1YmplY3QgdG8gKG9yIHdoaWNoIGhhdmUgYWNjcnVlZCBvdmVyIHRpbWUgd2hpbHN0IHRoZSBMaWNlbnNlIEFncmVlbWVudCBoYXMKYmVlbiBpbiBmb3JjZSkgb3Igd2hpY2ggYXJlIGV4cHJlc3NlZCB0byBjb250aW51ZSBpbmRlZmluaXRlbHksIHNoYWxsIGJlCnVuYWZmZWN0ZWQgYnkgdGhpcyBjZXNzYXRpb24sIGFuZCB0aGUgcHJvdmlzaW9ucyBvZiBwYXJhZ3JhcGggMTQuNyBzaGFsbApjb250aW51ZSB0byBhcHBseSB0byBzdWNoIHJpZ2h0cywgb2JsaWdhdGlvbnMgYW5kIGxpYWJpbGl0aWVzIGluZGVmaW5pdGVseS4KCgoxMC4gRElTQ0xBSU1FUiBPRiBXQVJSQU5USUVTCgoxMC4xIFlPVSBFWFBSRVNTTFkgVU5ERVJTVEFORCBBTkQgQUdSRUUgVEhBVCBZT1VSIFVTRSBPRiBUSEUgU0RLIElTIEFUIFlPVVIgU09MRQpSSVNLIEFORCBUSEFUIFRIRSBTREsgSVMgUFJPVklERUQgIkFTIElTIiBBTkQgIkFTIEFWQUlMQUJMRSIgV0lUSE9VVCBXQVJSQU5UWSBPRgpBTlkgS0lORCBGUk9NIEdPT0dMRS4KCjEwLjIgWU9VUiBVU0UgT0YgVEhFIFNESyBBTkQgQU5ZIE1BVEVSSUFMIERPV05MT0FERUQgT1IgT1RIRVJXSVNFIE9CVEFJTkVEClRIUk9VR0ggVEhFIFVTRSBPRiBUSEUgU0RLIElTIEFUIFlPVVIgT1dOIERJU0NSRVRJT04gQU5EIFJJU0sgQU5EIFlPVSBBUkUgU09MRUxZClJFU1BPTlNJQkxFIEZPUiBBTlkgREFNQUdFIFRPIFlPVVIgQ09NUFVURVIgU1lTVEVNIE9SIE9USEVSIERFVklDRSBPUiBMT1NTIE9GCkRBVEEgVEhBVCBSRVNVTFRTIEZST00gU1VDSCBVU0UuCgoxMC4zIEdPT0dMRSBGVVJUSEVSIEVYUFJFU1NMWSBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgQU5EIENPTkRJVElPTlMgT0YgQU5ZCktJTkQsIFdIRVRIRVIgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgSU1QTElFRApXQVJSQU5USUVTIEFORCBDT05ESVRJT05TIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UKQU5EIE5PTi1JTkZSSU5HRU1FTlQuCgoKMTEuIExJTUlUQVRJT04gT0YgTElBQklMSVRZCgoxMS4xIFlPVSBFWFBSRVNTTFkgVU5ERVJTVEFORCBBTkQgQUdSRUUgVEhBVCBHT09HTEUsIElUUyBTVUJTSURJQVJJRVMgQU5ECkFGRklMSUFURVMsIEFORCBJVFMgTElDRU5TT1JTIFNIQUxMIE5PVCBCRSBMSUFCTEUgVE8gWU9VIFVOREVSIEFOWSBUSEVPUlkgT0YKTElBQklMSVRZIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgQ09OU0VRVUVOVElBTCBPUgpFWEVNUExBUlkgREFNQUdFUyBUSEFUIE1BWSBCRSBJTkNVUlJFRCBCWSBZT1UsIElOQ0xVRElORyBBTlkgTE9TUyBPRiBEQVRBLApXSEVUSEVSIE9SIE5PVCBHT09HTEUgT1IgSVRTIFJFUFJFU0VOVEFUSVZFUyBIQVZFIEJFRU4gQURWSVNFRCBPRiBPUiBTSE9VTEQgSEFWRQpCRUVOIEFXQVJFIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBBTlkgU1VDSCBMT1NTRVMgQVJJU0lORy4KCgoxMi4gSW5kZW1uaWZpY2F0aW9uCgoxMi4xIFRvIHRoZSBtYXhpbXVtIGV4dGVudCBwZXJtaXR0ZWQgYnkgbGF3LCB5b3UgYWdyZWUgdG8gZGVmZW5kLCBpbmRlbW5pZnkgYW5kCmhvbGQgaGFybWxlc3MgR29vZ2xlLCBpdHMgYWZmaWxpYXRlcyBhbmQgdGhlaXIgcmVzcGVjdGl2ZSBkaXJlY3RvcnMsIG9mZmljZXJzLAplbXBsb3llZXMgYW5kIGFnZW50cyBmcm9tIGFuZCBhZ2FpbnN0IGFueSBhbmQgYWxsIGNsYWltcywgYWN0aW9ucywgc3VpdHMgb3IKcHJvY2VlZGluZ3MsIGFzIHdlbGwgYXMgYW55IGFuZCBhbGwgbG9zc2VzLCBsaWFiaWxpdGllcywgZGFtYWdlcywgY29zdHMgYW5kCmV4cGVuc2VzIChpbmNsdWRpbmcgcmVhc29uYWJsZSBhdHRvcm5leXMgZmVlcykgYXJpc2luZyBvdXQgb2Ygb3IgYWNjcnVpbmcgZnJvbQooYSkgeW91ciB1c2Ugb2YgdGhlIFNESywgKGIpIGFueSBhcHBsaWNhdGlvbiB5b3UgZGV2ZWxvcCBvbiB0aGUgU0RLIHRoYXQKaW5mcmluZ2VzIGFueSBjb3B5cmlnaHQsIHRyYWRlbWFyaywgdHJhZGUgc2VjcmV0LCB0cmFkZSBkcmVzcywgcGF0ZW50IG9yIG90aGVyCmludGVsbGVjdHVhbCBwcm9wZXJ0eSByaWdodCBvZiBhbnkgcGVyc29uIG9yIGRlZmFtZXMgYW55IHBlcnNvbiBvciB2aW9sYXRlcwp0aGVpciByaWdodHMgb2YgcHVibGljaXR5IG9yIHByaXZhY3ksIGFuZCAoYykgYW55IG5vbi1jb21wbGlhbmNlIGJ5IHlvdSB3aXRoIHRoZQpMaWNlbnNlIEFncmVlbWVudC4KCgoxMy4gQ2hhbmdlcyB0byB0aGUgTGljZW5zZSBBZ3JlZW1lbnQKCjEzLjEgR29vZ2xlIG1heSBtYWtlIGNoYW5nZXMgdG8gdGhlIExpY2Vuc2UgQWdyZWVtZW50IGFzIGl0IGRpc3RyaWJ1dGVzIG5ldwp2ZXJzaW9ucyBvZiB0aGUgU0RLLiBXaGVuIHRoZXNlIGNoYW5nZXMgYXJlIG1hZGUsIEdvb2dsZSB3aWxsIG1ha2UgYSBuZXcgdmVyc2lvbgpvZiB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgYXZhaWxhYmxlIG9uIHRoZSB3ZWJzaXRlIHdoZXJlIHRoZSBTREsgaXMgbWFkZQphdmFpbGFibGUuCgoKMTQuIEdlbmVyYWwgTGVnYWwgVGVybXMKCjE0LjEgVGhlIExpY2Vuc2UgQWdyZWVtZW50IGNvbnN0aXR1dGVzIHRoZSB3aG9sZSBsZWdhbCBhZ3JlZW1lbnQgYmV0d2VlbiB5b3UgYW5kCkdvb2dsZSBhbmQgZ292ZXJucyB5b3VyIHVzZSBvZiB0aGUgU0RLIChleGNsdWRpbmcgYW55IHNlcnZpY2VzIHdoaWNoIEdvb2dsZSBtYXkKcHJvdmlkZSB0byB5b3UgdW5kZXIgYSBzZXBhcmF0ZSB3cml0dGVuIGFncmVlbWVudCksIGFuZCBjb21wbGV0ZWx5IHJlcGxhY2VzIGFueQpwcmlvciBhZ3JlZW1lbnRzIGJldHdlZW4geW91IGFuZCBHb29nbGUgaW4gcmVsYXRpb24gdG8gdGhlIFNESy4KCjE0LjIgWW91IGFncmVlIHRoYXQgaWYgR29vZ2xlIGRvZXMgbm90IGV4ZXJjaXNlIG9yIGVuZm9yY2UgYW55IGxlZ2FsIHJpZ2h0IG9yCnJlbWVkeSB3aGljaCBpcyBjb250YWluZWQgaW4gdGhlIExpY2Vuc2UgQWdyZWVtZW50IChvciB3aGljaCBHb29nbGUgaGFzIHRoZQpiZW5lZml0IG9mIHVuZGVyIGFueSBhcHBsaWNhYmxlIGxhdyksIHRoaXMgd2lsbCBub3QgYmUgdGFrZW4gdG8gYmUgYSBmb3JtYWwKd2FpdmVyIG9mIEdvb2dsZSdzIHJpZ2h0cyBhbmQgdGhhdCB0aG9zZSByaWdodHMgb3IgcmVtZWRpZXMgd2lsbCBzdGlsbCBiZQphdmFpbGFibGUgdG8gR29vZ2xlLgoKMTQuMyBJZiBhbnkgY291cnQgb2YgbGF3LCBoYXZpbmcgdGhlIGp1cmlzZGljdGlvbiB0byBkZWNpZGUgb24gdGhpcyBtYXR0ZXIsCnJ1bGVzIHRoYXQgYW55IHByb3Zpc2lvbiBvZiB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgaXMgaW52YWxpZCwgdGhlbiB0aGF0CnByb3Zpc2lvbiB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgd2l0aG91dCBhZmZlY3RpbmcgdGhlIHJlc3QKb2YgdGhlIExpY2Vuc2UgQWdyZWVtZW50LiBUaGUgcmVtYWluaW5nIHByb3Zpc2lvbnMgb2YgdGhlIExpY2Vuc2UgQWdyZWVtZW50IHdpbGwKY29udGludWUgdG8gYmUgdmFsaWQgYW5kIGVuZm9yY2VhYmxlLgoKMTQuNCBZb3UgYWNrbm93bGVkZ2UgYW5kIGFncmVlIHRoYXQgZWFjaCBtZW1iZXIgb2YgdGhlIGdyb3VwIG9mIGNvbXBhbmllcyBvZgp3aGljaCBHb29nbGUgaXMgdGhlIHBhcmVudCBzaGFsbCBiZSB0aGlyZCBwYXJ0eSBiZW5lZmljaWFyaWVzIHRvIHRoZSBMaWNlbnNlCkFncmVlbWVudCBhbmQgdGhhdCBzdWNoIG90aGVyIGNvbXBhbmllcyBzaGFsbCBiZSBlbnRpdGxlZCB0byBkaXJlY3RseSBlbmZvcmNlLAphbmQgcmVseSB1cG9uLCBhbnkgcHJvdmlzaW9uIG9mIHRoZSBMaWNlbnNlIEFncmVlbWVudCB0aGF0IGNvbmZlcnMgYSBiZW5lZml0IG9uCihvciByaWdodHMgaW4gZmF2b3Igb2YpIHRoZW0uIE90aGVyIHRoYW4gdGhpcywgbm8gb3RoZXIgcGVyc29uIG9yIGNvbXBhbnkgc2hhbGwKYmUgdGhpcmQgcGFydHkgYmVuZWZpY2lhcmllcyB0byB0aGUgTGljZW5zZSBBZ3JlZW1lbnQuCgoxNC41IEVYUE9SVCBSRVNUUklDVElPTlMuIFRIRSBTREsgSVMgU1VCSkVDVCBUTyBVTklURUQgU1RBVEVTIEVYUE9SVCBMQVdTIEFORApSRUdVTEFUSU9OUy4gWU9VIE1VU1QgQ09NUExZIFdJVEggQUxMIERPTUVTVElDIEFORCBJTlRFUk5BVElPTkFMIEVYUE9SVCBMQVdTIEFORApSRUdVTEFUSU9OUyBUSEFUIEFQUExZIFRPIFRIRSBTREsuIFRIRVNFIExBV1MgSU5DTFVERSBSRVNUUklDVElPTlMgT04KREVTVElOQVRJT05TLCBFTkQgVVNFUlMgQU5EIEVORCBVU0UuCgoxNC42IFRoZSByaWdodHMgZ3JhbnRlZCBpbiB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgbWF5IG5vdCBiZSBhc3NpZ25lZCBvcgp0cmFuc2ZlcnJlZCBieSBlaXRoZXIgeW91IG9yIEdvb2dsZSB3aXRob3V0IHRoZSBwcmlvciB3cml0dGVuIGFwcHJvdmFsIG9mIHRoZQpvdGhlciBwYXJ0eS4gTmVpdGhlciB5b3Ugbm9yIEdvb2dsZSBzaGFsbCBiZSBwZXJtaXR0ZWQgdG8gZGVsZWdhdGUgdGhlaXIKcmVzcG9uc2liaWxpdGllcyBvciBvYmxpZ2F0aW9ucyB1bmRlciB0aGUgTGljZW5zZSBBZ3JlZW1lbnQgd2l0aG91dCB0aGUgcHJpb3IKd3JpdHRlbiBhcHByb3ZhbCBvZiB0aGUgb3RoZXIgcGFydHkuCgoxNC43IFRoZSBMaWNlbnNlIEFncmVlbWVudCwgYW5kIHlvdXIgcmVsYXRpb25zaGlwIHdpdGggR29vZ2xlIHVuZGVyIHRoZSBMaWNlbnNlCkFncmVlbWVudCwgc2hhbGwgYmUgZ292ZXJuZWQgYnkgdGhlIGxhd3Mgb2YgdGhlIFN0YXRlIG9mIENhbGlmb3JuaWEgd2l0aG91dApyZWdhcmQgdG8gaXRzIGNvbmZsaWN0IG9mIGxhd3MgcHJvdmlzaW9ucy4gWW91IGFuZCBHb29nbGUgYWdyZWUgdG8gc3VibWl0IHRvIHRoZQpleGNsdXNpdmUganVyaXNkaWN0aW9uIG9mIHRoZSBjb3VydHMgbG9jYXRlZCB3aXRoaW4gdGhlIGNvdW50eSBvZiBTYW50YSBDbGFyYSwKQ2FsaWZvcm5pYSB0byByZXNvbHZlIGFueSBsZWdhbCBtYXR0ZXIgYXJpc2luZyBmcm9tIHRoZSBMaWNlbnNlIEFncmVlbWVudC4KTm90d2l0aHN0YW5kaW5nIHRoaXMsIHlvdSBhZ3JlZSB0aGF0IEdvb2dsZSBzaGFsbCBzdGlsbCBiZSBhbGxvd2VkIHRvIGFwcGx5IGZvcgppbmp1bmN0aXZlIHJlbWVkaWVzIChvciBhbiBlcXVpdmFsZW50IHR5cGUgb2YgdXJnZW50IGxlZ2FsIHJlbGllZikgaW4gYW55Cmp1cmlzZGljdGlvbi4KCgpOb3ZlbWJlciAyMCwgMjAxNQ==","contentType":"text/plain","encoding":"base64"},"url":"https://developer.android.com/studio/terms.html"}}],"purl":"pkg:maven/play-services-auth/com.google.android.gms@15.0.0","externalReferences":[{"url":"https://mvnrepository.com/artifact/com.google.android.gms/play-services-auth/15.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/play-services-safetynet/com.google.android.gms@16.0.0","type":"library","group":"play-services-safetynet","name":"com.google.android.gms","version":"16.0.0","scope":"required","licenses":[{"license":{"name":"Android Software Development Kit License Agreement 2015","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://developer.android.com/studio/terms.html"}}],"purl":"pkg:maven/play-services-safetynet/com.google.android.gms@16.0.0","externalReferences":[{"url":"https://mvnrepository.com/artifact/com.google.android.gms/play-services-safetynet/16.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/material/com.google.android.material@1.0.0","type":"library","author":"The Android Open Source Project","group":"material","name":"com.google.android.material","version":"1.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/material/com.google.android.material@1.0.0","externalReferences":[{"url":"http://developer.android.com/tools/extras/support-library.html","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.google.android.material/material/1.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/firebase-messaging/com.google.firebase@17.3.4","type":"library","group":"firebase-messaging","name":"com.google.firebase","version":"17.3.4","scope":"required","licenses":[{"license":{"name":"Android Software Development Kit License Agreement 2015","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://developer.android.com/studio/terms.html"}}],"purl":"pkg:maven/firebase-messaging/com.google.firebase@17.3.4","externalReferences":[{"url":"https://mvnrepository.com/artifact/com.google.firebase/firebase-messaging/17.3.4","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/google-services/com.google.gms@4.2.0","type":"library","author":"The Android Open Source Project","group":"google-services","name":"com.google.gms","version":"4.2.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/google-services/com.google.gms@4.2.0","externalReferences":[{"url":"http://tools.android.com/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.google.gms/google-services/4.2.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"},{"name":"published_at","value":"2019-09-21T00:24:08+00:00"}]},{"bom-ref":"pkg:maven/android-integration/com.google.zxing@3.3.0","type":"library","author":"ZXing Authors","group":"android-integration","name":"com.google.zxing","version":"3.3.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/android-integration/com.google.zxing@3.3.0","externalReferences":[{"url":"https://github.com/zxing/zxing/android-integration","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.google.zxing/android-integration/3.3.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2016-09-16T14:27:44+00:00"}]},{"bom-ref":"pkg:maven/floatingactionbutton/com.melnykov@1.3.0","type":"library","author":"Oleksandr Melnykov","group":"floatingactionbutton","name":"com.melnykov","version":"1.3.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:maven/floatingactionbutton/com.melnykov@1.3.0","externalReferences":[{"url":"https://github.com/makovkastar/FloatingActionButton","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.melnykov/floatingactionbutton/1.3.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2015-04-05T08:40:40+00:00"}]},{"bom-ref":"pkg:maven/android-apt/com.neenbedankt.gradle.plugins@1.8","type":"library","author":"Hugo Visser","group":"android-apt","name":"com.neenbedankt.gradle.plugins","version":"1.8","scope":"required","licenses":[{"license":{"id":"Unlicense","text":{"content":"VGhpcyBpcyBmcmVlIGFuZCB1bmVuY3VtYmVyZWQgc29mdHdhcmUgcmVsZWFzZWQgaW50byB0aGUgcHVibGljIGRvbWFpbi4KCkFueW9uZSBpcyBmcmVlIHRvIGNvcHksIG1vZGlmeSwgcHVibGlzaCwgdXNlLCBjb21waWxlLCBzZWxsLCBvciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUsIGVpdGhlciBpbiBzb3VyY2UgY29kZSBmb3JtIG9yIGFzIGEgY29tcGlsZWQgYmluYXJ5LCBmb3IgYW55IHB1cnBvc2UsIGNvbW1lcmNpYWwgb3Igbm9uLWNvbW1lcmNpYWwsIGFuZCBieSBhbnkgbWVhbnMuCgpJbiBqdXJpc2RpY3Rpb25zIHRoYXQgcmVjb2duaXplIGNvcHlyaWdodCBsYXdzLCB0aGUgYXV0aG9yIG9yIGF1dGhvcnMgb2YgdGhpcyBzb2Z0d2FyZSBkZWRpY2F0ZSBhbnkgYW5kIGFsbCBjb3B5cmlnaHQgaW50ZXJlc3QgaW4gdGhlIHNvZnR3YXJlIHRvIHRoZSBwdWJsaWMgZG9tYWluLiBXZSBtYWtlIHRoaXMgZGVkaWNhdGlvbiBmb3IgdGhlIGJlbmVmaXQgb2YgdGhlIHB1YmxpYyBhdCBsYXJnZSBhbmQgdG8gdGhlIGRldHJpbWVudCBvZiBvdXIgaGVpcnMgYW5kCnN1Y2Nlc3NvcnMuIFdlIGludGVuZCB0aGlzIGRlZGljYXRpb24gdG8gYmUgYW4gb3ZlcnQgYWN0IG9mIHJlbGlucXVpc2htZW50IGluIHBlcnBldHVpdHkgb2YgYWxsIHByZXNlbnQgYW5kIGZ1dHVyZSByaWdodHMgdG8gdGhpcyBzb2Z0d2FyZSB1bmRlciBjb3B5cmlnaHQgbGF3LgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKRm9yIG1vcmUgaW5mb3JtYXRpb24sIHBsZWFzZSByZWZlciB0byA8aHR0cDovL3VubGljZW5zZS5vcmcvPgo=","contentType":"text/plain","encoding":"base64"},"url":"https://unlicense.org/"}}],"purl":"pkg:maven/android-apt/com.neenbedankt.gradle.plugins@1.8","externalReferences":[{"url":"https://bitbucket.org/hvisser/android-apt","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.neenbedankt.gradle.plugins/android-apt/1.8","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"},{"name":"published_at","value":"2015-09-21T14:51:52+00:00"}]},{"bom-ref":"pkg:maven/android-crop/com.soundcloud.android@1.0.1","type":"library","author":"SoundCloud, Jamie McDonald","group":"android-crop","name":"com.soundcloud.android","version":"1.0.1","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/android-crop/com.soundcloud.android@1.0.1","externalReferences":[{"url":"https://github.com/jdamcd/android-crop","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.soundcloud.android/android-crop/1.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2015-09-09T10:12:38+00:00"}]},{"bom-ref":"pkg:maven/leakcanary-android/com.squareup.leakcanary@1.5.4","type":"library","author":"Square, Inc.","group":"leakcanary-android","name":"com.squareup.leakcanary","version":"1.5.4","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/leakcanary-android/com.squareup.leakcanary@1.5.4","externalReferences":[{"url":"http://github.com/square/leakcanary/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.leakcanary/leakcanary-android/1.5.4","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"debugImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-09-22T23:52:45+00:00"}]},{"bom-ref":"pkg:maven/leakcanary-android-no-op/com.squareup.leakcanary@1.5.4","type":"library","author":"Square, Inc.","group":"leakcanary-android-no-op","name":"com.squareup.leakcanary","version":"1.5.4","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/leakcanary-android-no-op/com.squareup.leakcanary@1.5.4","externalReferences":[{"url":"http://github.com/square/leakcanary/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.leakcanary/leakcanary-android-no-op/1.5.4","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"releaseImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-09-22T23:50:25+00:00"}]},{"bom-ref":"pkg:maven/logging-interceptor/com.squareup.okhttp3@3.5.0","type":"library","group":"logging-interceptor","name":"com.squareup.okhttp3","version":"3.5.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/logging-interceptor/com.squareup.okhttp3@3.5.0","externalReferences":[{"url":"https://github.com/square/okhttp/logging-interceptor","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.okhttp3/logging-interceptor/3.5.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2016-12-01T17:57:56+00:00"}]},{"bom-ref":"pkg:maven/okhttp/com.squareup.okhttp3@3.5.0","type":"library","group":"okhttp","name":"com.squareup.okhttp3","version":"3.5.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/okhttp/com.squareup.okhttp3@3.5.0","externalReferences":[{"url":"https://github.com/square/okhttp/okhttp","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp/3.5.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2016-12-01T17:55:25+00:00"}]},{"bom-ref":"pkg:maven/adapter-rxjava/com.squareup.retrofit2@2.3.0","type":"library","author":"Square, Inc.","group":"adapter-rxjava","name":"com.squareup.retrofit2","version":"2.3.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/adapter-rxjava/com.squareup.retrofit2@2.3.0","externalReferences":[{"url":"http://github.com/square/retrofit/retrofit-adapters/adapter-rxjava/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.retrofit2/adapter-rxjava/2.3.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-05-13T23:49:09+00:00"}]},{"bom-ref":"pkg:maven/converter-gson/com.squareup.retrofit2@2.3.0","type":"library","author":"Square, Inc.","group":"converter-gson","name":"com.squareup.retrofit2","version":"2.3.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/converter-gson/com.squareup.retrofit2@2.3.0","externalReferences":[{"url":"http://github.com/square/retrofit/retrofit-converters/converter-gson/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-gson/2.3.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-05-13T23:49:26+00:00"}]},{"bom-ref":"pkg:maven/retrofit/com.squareup.retrofit2@2.3.0","type":"library","author":"Square, Inc.","group":"retrofit","name":"com.squareup.retrofit2","version":"2.3.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/retrofit/com.squareup.retrofit2@2.3.0","externalReferences":[{"url":"http://github.com/square/retrofit/retrofit/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit/2.3.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-05-13T23:48:46+00:00"}]},{"bom-ref":"pkg:maven/twitter/com.twitter.sdk.android@3.0.0","type":"library","group":"twitter","name":"com.twitter.sdk.android","version":"3.0.0","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/twitter/com.twitter.sdk.android@3.0.0","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"storeImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/commons-io/commons-io@2.6","type":"library","author":"The Apache Software Foundation, Scott Sanders, dIon Gillard, Nicola Ken Barozzi, Henri Yandell, Stephen Colebourne, Jeremias Maerki, Matthew Hawthorne, Martin Cooper, Rob Oxspring, Jochen Wiedmann, Niall Pemberton, Jukka Zitting, Gary Gregory, Kristian Rosenvold","group":"commons-io","name":"commons-io","version":"2.6","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/commons-io/commons-io@2.6","externalReferences":[{"url":"http://commons.apache.org/proper/commons-io/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/commons-io/commons-io/2.6","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-10-15T10:00:50+00:00"}]},{"bom-ref":"pkg:maven/circleimageview/de.hdodenhof@3.0.1","type":"library","author":"Henning Dodenhof","group":"circleimageview","name":"de.hdodenhof","version":"3.0.1","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/circleimageview/de.hdodenhof@3.0.1","externalReferences":[{"url":"https://github.com/hdodenhof/CircleImageView","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/de.hdodenhof/circleimageview/3.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2019-08-26T13:42:23+00:00"}]},{"bom-ref":"pkg:maven/flexible-adapter/eu.davidea@5.0.0-rc4","type":"library","group":"flexible-adapter","name":"eu.davidea","version":"5.0.0-rc4","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/flexible-adapter/eu.davidea@5.0.0-rc4","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]},{"bom-ref":"pkg:maven/gradle/io.fabric.tools@1.25.4","type":"library","group":"gradle","name":"io.fabric.tools","version":"1.25.4","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/gradle/io.fabric.tools@1.25.4","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"}]},{"bom-ref":"pkg:maven/rxandroid/io.reactivex@1.1.0","type":"library","author":"Jake Wharton, Matthias Käppler, Dan Lew","group":"rxandroid","name":"io.reactivex","version":"1.1.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/rxandroid/io.reactivex@1.1.0","externalReferences":[{"url":"https://github.com/ReactiveX/RxAndroid","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/io.reactivex/rxandroid/1.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2015-12-09T20:26:33+00:00"}]},{"bom-ref":"pkg:maven/rxjava/io.reactivex@1.1.0","type":"library","author":"Ben Christensen","group":"rxjava","name":"io.reactivex","version":"1.1.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/rxjava/io.reactivex@1.1.0","externalReferences":[{"url":"https://github.com/ReactiveX/RxJava","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/io.reactivex/rxjava/1.1.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2015-12-03T20:49:15+00:00"}]},{"bom-ref":"pkg:maven/realm-gradle-plugin/io.realm@3.1.1","type":"library","group":"realm-gradle-plugin","name":"io.realm","version":"3.1.1","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/realm-gradle-plugin/io.realm@3.1.1","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"classpath"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"build.gradle"}]},{"bom-ref":"pkg:maven/junit/junit@4.12","type":"library","author":"JUnit, David Saff, Kevin Cooney, Stefan Birkner, Marc Philipp","group":"junit","name":"junit","version":"4.12","scope":"required","licenses":[{"license":{"id":"EPL-1.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"http://www.eclipse.org/legal/epl-v10.html"}}],"purl":"pkg:maven/junit/junit@4.12","externalReferences":[{"url":"http://junit.org","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/junit/junit/4.12","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"testImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2014-12-04T16:17:43+00:00"}]},{"bom-ref":"pkg:maven/circleindicator/me.relex@1.2.2","type":"library","author":"relex","group":"circleindicator","name":"me.relex","version":"1.2.2","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/circleindicator/me.relex@1.2.2","externalReferences":[{"url":"https://github.com/ongakuer/CircleIndicator","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/me.relex/circleindicator/1.2.2","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2016-10-14T10:21:39+00:00"}]},{"bom-ref":"pkg:maven/bcpkix-jdk15on/org.bouncycastle@1.58","type":"library","author":"The Legion of the Bouncy Castle Inc.","group":"bcpkix-jdk15on","name":"org.bouncycastle","version":"1.58","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:maven/bcpkix-jdk15on/org.bouncycastle@1.58","externalReferences":[{"url":"http://www.bouncycastle.org/java.html","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on/1.58","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2017-08-23T04:08:21+00:00"}]},{"bom-ref":"pkg:maven/eventbus/org.greenrobot@3.0.0","type":"library","author":"greenrobot","group":"eventbus","name":"org.greenrobot","version":"3.0.0","scope":"required","licenses":[{"license":{"id":"Apache-2.0","text":{"content":"","contentType":"text/plain","encoding":"base64"},"url":"https://www.apache.org/licenses/LICENSE-2.0"}}],"purl":"pkg:maven/eventbus/org.greenrobot@3.0.0","externalReferences":[{"url":"http://greenrobot.org/eventbus/","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/org.greenrobot/eventbus/3.0.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2016-02-02T14:34:16+00:00"}]},{"bom-ref":"pkg:maven/robolectric/org.robolectric@4.0","type":"library","author":"Christian Williams, Jonathan Gerrish","group":"robolectric","name":"org.robolectric","version":"4.0","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:maven/robolectric/org.robolectric@4.0","externalReferences":[{"url":"http://robolectric.org","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/org.robolectric/robolectric/4.0","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"testImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2018-10-25T19:32:28+00:00"}]},{"bom-ref":"pkg:maven/shadows-multidex/org.robolectric@4.0.1","type":"library","author":"Christian Williams, Jonathan Gerrish","group":"shadows-multidex","name":"org.robolectric","version":"4.0.1","scope":"required","licenses":[{"license":{"id":"MIT","text":{"content":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgPHllYXI+IDxjb3B5cmlnaHQgaG9sZGVycz4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCg==","contentType":"text/plain","encoding":"base64"},"url":"https://opensource.org/licenses/MIT"}}],"purl":"pkg:maven/shadows-multidex/org.robolectric@4.0.1","externalReferences":[{"url":"http://robolectric.org","comment":"Homepage","type":"website"},{"url":"https://mvnrepository.com/artifact/org.robolectric/shadows-multidex/4.0.1","comment":"Index URL","type":"website"}],"properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"testImplementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"},{"name":"published_at","value":"2018-10-31T21:15:22+00:00"}]},{"bom-ref":"pkg:maven/MaskedEditText/ru.egslava@1.0.5","type":"library","group":"MaskedEditText","name":"ru.egslava","version":"1.0.5","scope":"required","licenses":[{"license":{"name":"On review"}}],"purl":"pkg:maven/MaskedEditText/ru.egslava@1.0.5","properties":[{"name":"language","value":"Java"},{"name":"relation","value":"direct"},{"name":"env","value":"implementation"},{"name":"match_type","value":"by_manifest"},{"name":"location","value":"xabber/build.gradle"}]}],"vulnerabilities":[{"bom-ref":"5e188fb1-e318-4e30-921f-f5f0873e83bc","id":"CVE-2018-1000844","references":[{"id":"GHSA-j379-9jr9-w5cq","source":{"name":"GitHub Advisories","url":"https://github.com/advisories/GHSA-j379-9jr9-w5cq"}},{"id":"CVE-2018-1000844","source":{"name":"NVD","url":"https://nvd.nist.gov/vuln/detail/CVE-2018-1000844"}}],"ratings":[{"score":9.1,"severity":"critical","method":"CVSSv3","vector":"AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N"},{"score":6.4,"severity":"medium","method":"CVSSv2","vector":"AV:N/AC:L/Au:N/C:P/I:P/A:N"}],"cwes":[611],"description":"Square Open Source Retrofit version Prior to commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437 contains a XML External Entity (XXE) vulnerability in JAXB that can result in An attacker could use this to remotely read files from the file system or to perform SSRF.. This vulnerability appears to have been fixed in After commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437.","detail":"Square Open Source Retrofit versions prior to commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437 contain a XML External Entity (XXE) vulnerability in JAXB. An attacker could use this to remotely read files from the file system or to perform SSRF. This vulnerability appears to have been fixed in commit 4a693c5aeeef2be6c7ecf80e7b5ec79f6ab59437.","published":"2018-12-20T15:29:00+00:00","updated":"2019-07-01T12:44:00+00:00","affects":[{"ref":"pkg:maven/retrofit/com.squareup.retrofit2@2.3.0"}]},{"bom-ref":"2ebbb78e-5ba3-4560-9477-745e71cadc62","id":"CVE-2018-1000850","references":[{"id":"GHSA-8p8g-f9vg-r7xr","source":{"name":"GitHub Advisories","url":"https://github.com/advisories/GHSA-8p8g-f9vg-r7xr"}},{"id":"CVE-2018-1000850","source":{"name":"NVD","url":"https://nvd.nist.gov/vuln/detail/CVE-2018-1000850"}}],"ratings":[{"score":7.5,"severity":"high","method":"CVSSv3","vector":"AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"},{"score":6.4,"severity":"medium","method":"CVSSv2","vector":"AV:N/AC:L/Au:N/C:N/I:P/A:P"}],"cwes":[22],"description":"Square Retrofit version versions from (including) 2.0 and 2.5.0 (excluding) contains a Directory Traversal vulnerability in RequestBuilder class, method addPathParameter that can result in By manipulating the URL an attacker could add or delete resources otherwise unavailable to her.. This attack appear to be exploitable via An attacker should have access to an encoded path parameter on POST, PUT or DELETE request.. This vulnerability appears to have been fixed in 2.5.0 and later.","detail":"Square Retrofit versions from (including) 2.0 to 2.5.0 (excluding) contain a Directory Traversal vulnerability in RequestBuilder class, method addPathParameter. By manipulating the URL an attacker could add or delete resources otherwise unavailable to her. This attack appears to be exploitable via an encoded path parameter on POST, PUT or DELETE request. This vulnerability appears to have been fixed in 2.5.0 and later.","published":"2018-12-20T15:29:00+00:00","updated":"2019-10-17T22:15:00+00:00","affects":[{"ref":"pkg:maven/retrofit/com.squareup.retrofit2@2.3.0"}]},{"bom-ref":"85ba13f5-53ed-4a1f-ad38-39cd7594dfd7","id":"CVE-2018-20200","references":[{"id":"CVE-2018-20200","source":{"name":"NVD","url":"https://nvd.nist.gov/vuln/detail/CVE-2018-20200"}}],"ratings":[{"score":5.9,"severity":"medium","method":"CVSSv3","vector":"AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N"},{"score":4.3,"severity":"medium","method":"CVSSv2","vector":"AV:N/AC:M/Au:N/C:P/I:N/A:N"}],"cwes":[295],"description":"** DISPUTED ** CertificatePinner.java in OkHttp 3.x through 3.12.0 allows man-in-the-middle attackers to bypass certificate pinning by changing SSLContext and the boolean values while hooking the application. NOTE: This id is disputed because some parties don't consider this is a vulnerability. Their rationale can be found in https://github.com/square/okhttp/issues/4967.","published":"2019-04-18T19:29:00+00:00","updated":"2020-12-16T06:15:00+00:00","affects":[{"ref":"pkg:maven/okhttp/com.squareup.okhttp3@3.5.0"}]},{"bom-ref":"7ec2c03f-79a0-43f4-a09f-53adffff6c5f","id":"CVE-2020-15250","references":[{"id":"GHSA-269g-pwp5-87pp","source":{"name":"GitHub Advisories","url":"https://github.com/advisories/GHSA-269g-pwp5-87pp"}},{"id":"CVE-2020-15250","source":{"name":"NVD","url":"https://nvd.nist.gov/vuln/detail/CVE-2020-15250"}}],"ratings":[{"score":5.5,"severity":"medium","method":"CVSSv3","vector":"AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N"},{"score":1.9,"severity":"low","method":"CVSSv2","vector":"AV:L/AC:M/Au:N/C:P/I:N/A:N"}],"cwes":[200,732],"description":"In JUnit4 from version 4.7 and before 4.13.1, the test rule TemporaryFolder contains a local information disclosure vulnerability. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. This vulnerability impacts you if the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder, and the JUnit tests execute in an environment where the OS has other untrusted users. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. For Java 1.7 and higher users: this vulnerability is fixed in 4.13.1. For Java 1.6 and lower users: no patch is available, you must use the workaround below. If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. For more information, including an example of vulnerable code, see the referenced GitHub Security Advisory.","detail":"### Vulnerability\n\nThe JUnit4 test rule [TemporaryFolder](https://junit.org/junit4/javadoc/4.13/org/junit/rules/TemporaryFolder.html) contains a local information disclosure vulnerability.\n\nExample of vulnerable code:\n```java\npublic static class HasTempFolder {\n    @Rule\n    public TemporaryFolder folder = new TemporaryFolder();\n\n    @Test\n    public void testUsingTempFolder() throws IOException {\n        folder.getRoot(); // Previous file permissions: `drwxr-xr-x`; After fix:`drwx------`\n        File createdFile= folder.newFile(\"myfile.txt\"); // unchanged/irrelevant file permissions\n        File createdFolder= folder.newFolder(\"subfolder\"); // unchanged/irrelevant file permissions\n        // ...\n    }\n}\n```\n\n### Impact\n\nOn Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system.\n\nThis vulnerability **does not** allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability.\n\nWhen analyzing the impact of this vulnerability, here are the important questions to ask:\n\n1. Do the JUnit tests write sensitive information, like API keys or passwords, into the temporary folder?\n    - If yes, this vulnerability impacts you, but only if you also answer 'yes' to question 2.\n    - If no, this vulnerability does not impact you.\n2. Do the JUnit tests ever execute in an environment where the OS has other untrusted users. \n    _This may apply in CI/CD environments but normally won't be 'yes' for personal developer machines._\n    - If yes, and you answered 'yes' to question 1, this vulnerability impacts you.\n    - If no, this vulnerability does not impact you.\n\n### Patches\n\nBecause certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using.\n - Java 1.7 and higher users: this vulnerability is fixed in 4.13.1.\n - Java 1.6 and lower users: **no patch is available, you must use the workaround below.**\n\n### Workarounds\n\nIf you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability.\n\n### References\n- [CWE-200: Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)\n- Fix commit https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\n\n#### Similar Vulnerabilities\n - Google Guava - https://github.com/google/guava/issues/4011\n - Apache Ant - https://nvd.nist.gov/vuln/detail/CVE-2020-1945\n - JetBrains Kotlin Compiler - https://nvd.nist.gov/vuln/detail/CVE-2020-15824\n\n### For more information\nIf you have any questions or comments about this advisory, please pen an issue in [junit-team/junit4](https://github.com/junit-team/junit4/issues).","published":"2020-10-12T18:15:00+00:00","updated":"2022-05-12T14:43:00+00:00","affects":[{"ref":"pkg:maven/junit/junit@4.12"}]},{"bom-ref":"b4203e34-53a8-4ccd-a27e-9df09ffba05b","id":"CVE-2021-29425","references":[{"id":"GHSA-gwrp-pvrq-jmwv","source":{"name":"GitHub Advisories","url":"https://github.com/advisories/GHSA-gwrp-pvrq-jmwv"}},{"id":"CVE-2021-29425","source":{"name":"NVD","url":"https://nvd.nist.gov/vuln/detail/CVE-2021-29425"}}],"ratings":[{"score":4.8,"severity":"medium","method":"CVSSv3","vector":"AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"},{"score":5.8,"severity":"medium","method":"CVSSv2","vector":"AV:N/AC:M/Au:N/C:P/I:P/A:N"}],"cwes":[20,22],"description":"In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string, like \"//../foo\", or \"\\\\..\\foo\", the result would be the same value, thus possibly providing access to files in the parent directory, but not further above (thus \"limited\" path traversal), if the calling code would use the result to construct a path value.","detail":"In Apache Commons IO before 2.7, When invoking the method FileNameUtils.normalize with an improper input string, like \"//../foo\", or \"\\\\..\\foo\", the result would be the same value, thus possibly providing access to files in the parent directory, but not further above (thus \"limited\" path traversal), if the calling code would use the result to construct a path value.","published":"2021-04-13T07:15:00+00:00","updated":"2022-05-12T14:05:00+00:00","affects":[{"ref":"pkg:maven/commons-io/commons-io@2.6"}]}]}
